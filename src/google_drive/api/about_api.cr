#  Drive API
#
# Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
#
# The version of the OpenAPI document: v3
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 5.3.1-SNAPSHOT
#

require "uri"

module GoogleDrive
  class AboutApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Gets information about the user, the user's Drive, and system capabilities.
    # @return [About]
    def drive_about_get(*, alt : String? = "json", fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = true, quota_user : String? = nil, user_ip : String? = nil)
      data, _status_code, _headers = drive_about_get_with_http_info(alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip)
      data
    end

    # Gets information about the user, the user&#39;s Drive, and system capabilities.
    # @return [Array<(About, Integer, Hash)>] About data, response status code and response headers
    def drive_about_get_with_http_info(*, alt : String? = "json", fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = true, quota_user : String? = nil, user_ip : String? = nil)
      if @api_client.config.debugging
        Log.debug { "Calling API: AboutApi.drive_about_get ..." }
      end
      allowable_values = ["json", "media"]
      if @api_client.config.client_side_validation && alt.present? && !allowable_values.includes?(alt)
        raise ArgumentError.new("invalid value for \"alt\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/drive/v3/about"

      # query parameters
      query_params = Hash(String, String).new
      query_params["alt"] = alt.to_s if alt.present?
      query_params["fields"] = fields.to_s if fields.present?
      query_params["key"] = key.to_s if key.present?
      query_params["oauth_token"] = oauth_token.to_s if oauth_token.present?
      query_params["prettyPrint"] = pretty_print.to_s if pretty_print.present?
      query_params["quotaUser"] = quota_user.to_s if quota_user.present?
      query_params["userIp"] = user_ip.to_s if user_ip.present?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "About"

      # auth_names
      auth_names = ["Oauth2"]

      data, status_code, headers = @api_client.call_api(
        :"GET",
        local_var_path,
        "AboutApi.drive_about_get",
        return_type,
        post_body,
        auth_names,
        header_params,
        query_params,
        form_params
      )

      if @api_client.config.debugging
        Log.debug { "API called: AboutApi#drive_about_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end
      return About.from_nason(data), status_code, headers
    end

    # Gets information about the user, the user&#39;s Drive, and system capabilities.
    # @return nil
    def drive_about_get(*, alt : String? = "json", fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = true, quota_user : String? = nil, user_ip : String? = nil, &block : Crest::Response ->)
      if @api_client.config.debugging
        Log.debug { "Calling API: AboutApi.drive_about_get ..." }
      end
      allowable_values = ["json", "media"]
      if @api_client.config.client_side_validation && alt.present? && !allowable_values.includes?(alt)
        raise ArgumentError.new("invalid value for \"alt\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/drive/v3/about"

      # query parameters
      query_params = Hash(String, String).new
      query_params["alt"] = alt.to_s if alt.present?
      query_params["fields"] = fields.to_s if fields.present?
      query_params["key"] = key.to_s if key.present?
      query_params["oauth_token"] = oauth_token.to_s if oauth_token.present?
      query_params["prettyPrint"] = pretty_print.to_s if pretty_print.present?
      query_params["quotaUser"] = quota_user.to_s if quota_user.present?
      query_params["userIp"] = user_ip.to_s if user_ip.present?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "About"

      # auth_names
      auth_names = ["Oauth2"]

      @api_client.call_api(
        :"GET",
        local_var_path,
        "AboutApi.drive_about_get",
        return_type,
        post_body,
        auth_names,
        header_params,
        query_params,
        form_params
      ) do |response|
        block.call(response)
      end
    end
  end
end
