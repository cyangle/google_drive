#  Drive API
#
# Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
#
# The version of the OpenAPI document: v3
#
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module GoogleDrive
  class CommentsApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Creates a comment on a file.
    # @required @param file_id [String?] The ID of the file.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param comment [GoogleDrive::Comment?]
    # @return [GoogleDrive::Comment]
    def create(
      *,
      file_id : String? = nil,
      alt : String? = "json",
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      user_ip : String? = nil,
      comment : GoogleDrive::Comment? = nil
    ) : GoogleDrive::Comment
      data, _status_code, _headers = create_with_http_info(file_id: file_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, comment: comment)
      data
    end

    # Creates a comment on a file.
    # @required @param file_id [String?] The ID of the file.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param comment [GoogleDrive::Comment?]
    # @return [Tuple(GoogleDrive::Comment, Integer, Hash)] GoogleDrive::Comment, response status code and response headers
    def create_with_http_info(
      *,
      file_id : String? = nil,
      alt : String? = "json",
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      user_ip : String? = nil,
      comment : GoogleDrive::Comment? = nil
    ) : Tuple(GoogleDrive::Comment, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create(file_id: file_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, comment: comment)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: CommentsApi#create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(GoogleDrive::Comment.from_json(body), status_code, headers)
    end

    # Creates a comment on a file.
    # @required @param file_id [String?] The ID of the file.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param comment [GoogleDrive::Comment?]
    # @return nil
    def create(
      *,
      file_id : String? = nil,
      alt : String? = "json",
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      user_ip : String? = nil,
      comment : GoogleDrive::Comment? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create(file_id: file_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, comment: comment).execute(&block)
    end

    DRIVE_COMMENTS_CREATE_VALID_VALUES_FOR_ALT = String.static_array("json", "media")

    # @return Crest::Request
    def build_api_request_for_create(
      *,
      file_id : String? = nil,
      alt : String? = "json",
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      user_ip : String? = nil,
      comment : GoogleDrive::Comment? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: CommentsApi.create ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"file_id\" is required and cannot be null") if file_id.nil?

        unless (_alt = alt).nil?
          OpenApi::EnumValidator.validate("alt", _alt, DRIVE_COMMENTS_CREATE_VALID_VALUES_FOR_ALT)
        end

        unless (_comment = comment).nil?
          _comment.validate if _comment.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/drive/v3/files/{fileId}/comments".sub("{" + "fileId" + "}", URI.encode_path(file_id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: comment, content_type: header_params["Content-Type"]?) if !comment.nil?

      # auth_names
      auth_names = ["Oauth2", "Oauth2c"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "CommentsApi.drive_comments_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Deletes a comment.
    # @required @param file_id [String?] The ID of the file.
    # @required @param comment_id [String?] The ID of the comment.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @return [Nil]
    def delete(
      *,
      file_id : String? = nil,
      comment_id : String? = nil,
      alt : String? = "json",
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      user_ip : String? = nil
    ) : Nil
      delete_with_http_info(file_id: file_id, comment_id: comment_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip)
      nil
    end

    # Deletes a comment.
    # @required @param file_id [String?] The ID of the file.
    # @required @param comment_id [String?] The ID of the comment.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_with_http_info(
      *,
      file_id : String? = nil,
      comment_id : String? = nil,
      alt : String? = "json",
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      user_ip : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete(file_id: file_id, comment_id: comment_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: CommentsApi#delete\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Deletes a comment.
    # @required @param file_id [String?] The ID of the file.
    # @required @param comment_id [String?] The ID of the comment.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @return nil
    def delete(
      *,
      file_id : String? = nil,
      comment_id : String? = nil,
      alt : String? = "json",
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      user_ip : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete(file_id: file_id, comment_id: comment_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip).execute(&block)
    end

    DRIVE_COMMENTS_DELETE_VALID_VALUES_FOR_ALT = String.static_array("json", "media")

    # @return Crest::Request
    def build_api_request_for_delete(
      *,
      file_id : String? = nil,
      comment_id : String? = nil,
      alt : String? = "json",
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      user_ip : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: CommentsApi.delete ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"file_id\" is required and cannot be null") if file_id.nil?

        raise ArgumentError.new("\"comment_id\" is required and cannot be null") if comment_id.nil?

        unless (_alt = alt).nil?
          OpenApi::EnumValidator.validate("alt", _alt, DRIVE_COMMENTS_DELETE_VALID_VALUES_FOR_ALT)
        end
      end

      # resource path
      local_var_path = "/drive/v3/files/{fileId}/comments/{commentId}".sub("{" + "fileId" + "}", URI.encode_path(file_id.to_s)).sub("{" + "commentId" + "}", URI.encode_path(comment_id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["Oauth2", "Oauth2c"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "CommentsApi.drive_comments_delete",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Gets a comment by ID.
    # @required @param file_id [String?] The ID of the file.
    # @required @param comment_id [String?] The ID of the comment.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param include_deleted [Bool?] Whether to return deleted comments. Deleted comments will not include their original content.
    # @return [GoogleDrive::Comment]
    def get(
      *,
      file_id : String? = nil,
      comment_id : String? = nil,
      alt : String? = "json",
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      user_ip : String? = nil,
      include_deleted : Bool? = nil
    ) : GoogleDrive::Comment
      data, _status_code, _headers = get_with_http_info(file_id: file_id, comment_id: comment_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, include_deleted: include_deleted)
      data
    end

    # Gets a comment by ID.
    # @required @param file_id [String?] The ID of the file.
    # @required @param comment_id [String?] The ID of the comment.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param include_deleted [Bool?] Whether to return deleted comments. Deleted comments will not include their original content.
    # @return [Tuple(GoogleDrive::Comment, Integer, Hash)] GoogleDrive::Comment, response status code and response headers
    def get_with_http_info(
      *,
      file_id : String? = nil,
      comment_id : String? = nil,
      alt : String? = "json",
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      user_ip : String? = nil,
      include_deleted : Bool? = nil
    ) : Tuple(GoogleDrive::Comment, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get(file_id: file_id, comment_id: comment_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, include_deleted: include_deleted)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: CommentsApi#get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(GoogleDrive::Comment.from_json(body), status_code, headers)
    end

    # Gets a comment by ID.
    # @required @param file_id [String?] The ID of the file.
    # @required @param comment_id [String?] The ID of the comment.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param include_deleted [Bool?] Whether to return deleted comments. Deleted comments will not include their original content.
    # @return nil
    def get(
      *,
      file_id : String? = nil,
      comment_id : String? = nil,
      alt : String? = "json",
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      user_ip : String? = nil,
      include_deleted : Bool? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get(file_id: file_id, comment_id: comment_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, include_deleted: include_deleted).execute(&block)
    end

    DRIVE_COMMENTS_GET_VALID_VALUES_FOR_ALT = String.static_array("json", "media")

    # @return Crest::Request
    def build_api_request_for_get(
      *,
      file_id : String? = nil,
      comment_id : String? = nil,
      alt : String? = "json",
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      user_ip : String? = nil,
      include_deleted : Bool? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: CommentsApi.get ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"file_id\" is required and cannot be null") if file_id.nil?

        raise ArgumentError.new("\"comment_id\" is required and cannot be null") if comment_id.nil?

        unless (_alt = alt).nil?
          OpenApi::EnumValidator.validate("alt", _alt, DRIVE_COMMENTS_GET_VALID_VALUES_FOR_ALT)
        end
      end

      # resource path
      local_var_path = "/drive/v3/files/{fileId}/comments/{commentId}".sub("{" + "fileId" + "}", URI.encode_path(file_id.to_s)).sub("{" + "commentId" + "}", URI.encode_path(comment_id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["includeDeleted"] = include_deleted.to_s if !include_deleted.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["Oauth2", "Oauth2c"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "CommentsApi.drive_comments_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Lists a file's comments.
    # @required @param file_id [String?] The ID of the file.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param include_deleted [Bool?] Whether to include deleted comments. Deleted comments will not include their original content.
    # @optional @param page_size [Int32?] The maximum number of comments to return per page.
    # @optional @param page_token [String?] The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response.
    # @optional @param start_modified_time [String?] The minimum value of 'modifiedTime' for the result comments (RFC 3339 date-time).
    # @return [GoogleDrive::CommentList]
    def list(
      *,
      file_id : String? = nil,
      alt : String? = "json",
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      user_ip : String? = nil,
      include_deleted : Bool? = nil,
      page_size : Int32? = nil,
      page_token : String? = nil,
      start_modified_time : String? = nil
    ) : GoogleDrive::CommentList
      data, _status_code, _headers = list_with_http_info(file_id: file_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, include_deleted: include_deleted, page_size: page_size, page_token: page_token, start_modified_time: start_modified_time)
      data
    end

    # Lists a file&#39;s comments.
    # @required @param file_id [String?] The ID of the file.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param include_deleted [Bool?] Whether to include deleted comments. Deleted comments will not include their original content.
    # @optional @param page_size [Int32?] The maximum number of comments to return per page.
    # @optional @param page_token [String?] The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response.
    # @optional @param start_modified_time [String?] The minimum value of 'modifiedTime' for the result comments (RFC 3339 date-time).
    # @return [Tuple(GoogleDrive::CommentList, Integer, Hash)] GoogleDrive::CommentList, response status code and response headers
    def list_with_http_info(
      *,
      file_id : String? = nil,
      alt : String? = "json",
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      user_ip : String? = nil,
      include_deleted : Bool? = nil,
      page_size : Int32? = nil,
      page_token : String? = nil,
      start_modified_time : String? = nil
    ) : Tuple(GoogleDrive::CommentList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list(file_id: file_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, include_deleted: include_deleted, page_size: page_size, page_token: page_token, start_modified_time: start_modified_time)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: CommentsApi#list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(GoogleDrive::CommentList.from_json(body), status_code, headers)
    end

    # Lists a file&#39;s comments.
    # @required @param file_id [String?] The ID of the file.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param include_deleted [Bool?] Whether to include deleted comments. Deleted comments will not include their original content.
    # @optional @param page_size [Int32?] The maximum number of comments to return per page.
    # @optional @param page_token [String?] The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response.
    # @optional @param start_modified_time [String?] The minimum value of 'modifiedTime' for the result comments (RFC 3339 date-time).
    # @return nil
    def list(
      *,
      file_id : String? = nil,
      alt : String? = "json",
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      user_ip : String? = nil,
      include_deleted : Bool? = nil,
      page_size : Int32? = nil,
      page_token : String? = nil,
      start_modified_time : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list(file_id: file_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, include_deleted: include_deleted, page_size: page_size, page_token: page_token, start_modified_time: start_modified_time).execute(&block)
    end

    DRIVE_COMMENTS_LIST_VALID_VALUES_FOR_ALT = String.static_array("json", "media")
    DRIVE_COMMENTS_LIST_MAX_FOR_PAGE_SIZE    = Int32.new("100")
    DRIVE_COMMENTS_LIST_MIN_FOR_PAGE_SIZE    = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_list(
      *,
      file_id : String? = nil,
      alt : String? = "json",
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      user_ip : String? = nil,
      include_deleted : Bool? = nil,
      page_size : Int32? = nil,
      page_token : String? = nil,
      start_modified_time : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: CommentsApi.list ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"file_id\" is required and cannot be null") if file_id.nil?

        unless (_alt = alt).nil?
          OpenApi::EnumValidator.validate("alt", _alt, DRIVE_COMMENTS_LIST_VALID_VALUES_FOR_ALT)
        end

        unless (_page_size = page_size).nil?
          OpenApi::PrimitiveValidator.validate_max_number("page_size", _page_size, DRIVE_COMMENTS_LIST_MAX_FOR_PAGE_SIZE)
          OpenApi::PrimitiveValidator.validate_min_number("page_size", _page_size, DRIVE_COMMENTS_LIST_MIN_FOR_PAGE_SIZE)
        end
      end

      # resource path
      local_var_path = "/drive/v3/files/{fileId}/comments".sub("{" + "fileId" + "}", URI.encode_path(file_id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["includeDeleted"] = include_deleted.to_s if !include_deleted.nil?
      query_params["pageSize"] = page_size.to_s if !page_size.nil?
      query_params["pageToken"] = page_token.to_s if !page_token.nil?
      query_params["startModifiedTime"] = start_modified_time.to_s if !start_modified_time.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["Oauth2", "Oauth2c"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "CommentsApi.drive_comments_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Updates a comment with patch semantics.
    # @required @param file_id [String?] The ID of the file.
    # @required @param comment_id [String?] The ID of the comment.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param comment [GoogleDrive::Comment?]
    # @return [GoogleDrive::Comment]
    def update(
      *,
      file_id : String? = nil,
      comment_id : String? = nil,
      alt : String? = "json",
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      user_ip : String? = nil,
      comment : GoogleDrive::Comment? = nil
    ) : GoogleDrive::Comment
      data, _status_code, _headers = update_with_http_info(file_id: file_id, comment_id: comment_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, comment: comment)
      data
    end

    # Updates a comment with patch semantics.
    # @required @param file_id [String?] The ID of the file.
    # @required @param comment_id [String?] The ID of the comment.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param comment [GoogleDrive::Comment?]
    # @return [Tuple(GoogleDrive::Comment, Integer, Hash)] GoogleDrive::Comment, response status code and response headers
    def update_with_http_info(
      *,
      file_id : String? = nil,
      comment_id : String? = nil,
      alt : String? = "json",
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      user_ip : String? = nil,
      comment : GoogleDrive::Comment? = nil
    ) : Tuple(GoogleDrive::Comment, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update(file_id: file_id, comment_id: comment_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, comment: comment)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: CommentsApi#update\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(GoogleDrive::Comment.from_json(body), status_code, headers)
    end

    # Updates a comment with patch semantics.
    # @required @param file_id [String?] The ID of the file.
    # @required @param comment_id [String?] The ID of the comment.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param comment [GoogleDrive::Comment?]
    # @return nil
    def update(
      *,
      file_id : String? = nil,
      comment_id : String? = nil,
      alt : String? = "json",
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      user_ip : String? = nil,
      comment : GoogleDrive::Comment? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update(file_id: file_id, comment_id: comment_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, comment: comment).execute(&block)
    end

    DRIVE_COMMENTS_UPDATE_VALID_VALUES_FOR_ALT = String.static_array("json", "media")

    # @return Crest::Request
    def build_api_request_for_update(
      *,
      file_id : String? = nil,
      comment_id : String? = nil,
      alt : String? = "json",
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      user_ip : String? = nil,
      comment : GoogleDrive::Comment? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: CommentsApi.update ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"file_id\" is required and cannot be null") if file_id.nil?

        raise ArgumentError.new("\"comment_id\" is required and cannot be null") if comment_id.nil?

        unless (_alt = alt).nil?
          OpenApi::EnumValidator.validate("alt", _alt, DRIVE_COMMENTS_UPDATE_VALID_VALUES_FOR_ALT)
        end

        unless (_comment = comment).nil?
          _comment.validate if _comment.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/drive/v3/files/{fileId}/comments/{commentId}".sub("{" + "fileId" + "}", URI.encode_path(file_id.to_s)).sub("{" + "commentId" + "}", URI.encode_path(comment_id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: comment, content_type: header_params["Content-Type"]?) if !comment.nil?

      # auth_names
      auth_names = ["Oauth2", "Oauth2c"]

      @api_client.build_api_request(
        http_method: :"PATCH",
        path: local_var_path,
        operation: "CommentsApi.drive_comments_update",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
