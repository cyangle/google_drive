#  Drive API
#
# Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
#
# The version of the OpenAPI document: v3
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 5.3.1-SNAPSHOT
#

require "uri"

module GoogleDrive
  class RevisionsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Permanently deletes a file version. You can only delete revisions for files with binary content in Google Drive, like images or videos. Revisions for other files, like Google Docs or Sheets, and the last remaining file version can't be deleted.
    # @param file_id [String] The ID of the file.
    # @param revision_id [String] The ID of the revision.
    # @return [nil]
    def drive_revisions_delete(*, file_id : String, revision_id : String, alt : String? = "json", fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = true, quota_user : String? = nil, user_ip : String? = nil)
      drive_revisions_delete_with_http_info(file_id: file_id, revision_id: revision_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip)
      nil
    end

    # Permanently deletes a file version. You can only delete revisions for files with binary content in Google Drive, like images or videos. Revisions for other files, like Google Docs or Sheets, and the last remaining file version can&#39;t be deleted.
    # @param file_id [String] The ID of the file.
    # @param revision_id [String] The ID of the revision.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def drive_revisions_delete_with_http_info(*, file_id : String, revision_id : String, alt : String? = "json", fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = true, quota_user : String? = nil, user_ip : String? = nil)
      if @api_client.config.debugging
        Log.debug { "Calling API: RevisionsApi.drive_revisions_delete ..." }
      end
      allowable_values = ["json", "media"]
      if @api_client.config.client_side_validation && alt.present? && !allowable_values.includes?(alt)
        raise ArgumentError.new("invalid value for \"alt\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/drive/v3/files/{fileId}/revisions/{revisionId}".sub("{" + "fileId" + "}", URI.encode_path(file_id.to_s)).sub("{" + "revisionId" + "}", URI.encode_path(revision_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["alt"] = alt.to_s if alt.present?
      query_params["fields"] = fields.to_s if fields.present?
      query_params["key"] = key.to_s if key.present?
      query_params["oauth_token"] = oauth_token.to_s if oauth_token.present?
      query_params["prettyPrint"] = pretty_print.to_s if pretty_print.present?
      query_params["quotaUser"] = quota_user.to_s if quota_user.present?
      query_params["userIp"] = user_ip.to_s if user_ip.present?

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["Oauth2"]

      data, status_code, headers = @api_client.call_api(
        :"DELETE",
        local_var_path,
        "RevisionsApi.drive_revisions_delete",
        return_type,
        post_body,
        auth_names,
        header_params,
        query_params,
        form_params
      )

      if @api_client.config.debugging
        Log.debug { "API called: RevisionsApi#drive_revisions_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end
      return nil, status_code, headers
    end

    # Permanently deletes a file version. You can only delete revisions for files with binary content in Google Drive, like images or videos. Revisions for other files, like Google Docs or Sheets, and the last remaining file version can&#39;t be deleted.
    # @param file_id [String] The ID of the file.
    # @param revision_id [String] The ID of the revision.
    # @return nil
    def drive_revisions_delete(*, file_id : String, revision_id : String, alt : String? = "json", fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = true, quota_user : String? = nil, user_ip : String? = nil, &block : Crest::Response ->)
      if @api_client.config.debugging
        Log.debug { "Calling API: RevisionsApi.drive_revisions_delete ..." }
      end
      allowable_values = ["json", "media"]
      if @api_client.config.client_side_validation && alt.present? && !allowable_values.includes?(alt)
        raise ArgumentError.new("invalid value for \"alt\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/drive/v3/files/{fileId}/revisions/{revisionId}".sub("{" + "fileId" + "}", URI.encode_path(file_id.to_s)).sub("{" + "revisionId" + "}", URI.encode_path(revision_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["alt"] = alt.to_s if alt.present?
      query_params["fields"] = fields.to_s if fields.present?
      query_params["key"] = key.to_s if key.present?
      query_params["oauth_token"] = oauth_token.to_s if oauth_token.present?
      query_params["prettyPrint"] = pretty_print.to_s if pretty_print.present?
      query_params["quotaUser"] = quota_user.to_s if quota_user.present?
      query_params["userIp"] = user_ip.to_s if user_ip.present?

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["Oauth2"]

      @api_client.call_api(
        :"DELETE",
        local_var_path,
        "RevisionsApi.drive_revisions_delete",
        return_type,
        post_body,
        auth_names,
        header_params,
        query_params,
        form_params
      ) do |response|
        block.call(response)
      end
    end

    # Gets a revision's metadata or content by ID.
    # @param file_id [String] The ID of the file.
    # @param revision_id [String] The ID of the revision.
    # @return [Revision]
    def drive_revisions_get(*, file_id : String, revision_id : String, alt : String? = "json", fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = true, quota_user : String? = nil, user_ip : String? = nil, acknowledge_abuse : Bool? = false)
      data, _status_code, _headers = drive_revisions_get_with_http_info(file_id: file_id, revision_id: revision_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, acknowledge_abuse: acknowledge_abuse)
      data
    end

    # Gets a revision&#39;s metadata or content by ID.
    # @param file_id [String] The ID of the file.
    # @param revision_id [String] The ID of the revision.
    # @return [Array<(Revision, Integer, Hash)>] Revision data, response status code and response headers
    def drive_revisions_get_with_http_info(*, file_id : String, revision_id : String, alt : String? = "json", fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = true, quota_user : String? = nil, user_ip : String? = nil, acknowledge_abuse : Bool? = false)
      if @api_client.config.debugging
        Log.debug { "Calling API: RevisionsApi.drive_revisions_get ..." }
      end
      allowable_values = ["json", "media"]
      if @api_client.config.client_side_validation && alt.present? && !allowable_values.includes?(alt)
        raise ArgumentError.new("invalid value for \"alt\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/drive/v3/files/{fileId}/revisions/{revisionId}".sub("{" + "fileId" + "}", URI.encode_path(file_id.to_s)).sub("{" + "revisionId" + "}", URI.encode_path(revision_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["alt"] = alt.to_s if alt.present?
      query_params["fields"] = fields.to_s if fields.present?
      query_params["key"] = key.to_s if key.present?
      query_params["oauth_token"] = oauth_token.to_s if oauth_token.present?
      query_params["prettyPrint"] = pretty_print.to_s if pretty_print.present?
      query_params["quotaUser"] = quota_user.to_s if quota_user.present?
      query_params["userIp"] = user_ip.to_s if user_ip.present?
      query_params["acknowledgeAbuse"] = acknowledge_abuse.to_s if acknowledge_abuse.present?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Revision"

      # auth_names
      auth_names = ["Oauth2"]

      data, status_code, headers = @api_client.call_api(
        :"GET",
        local_var_path,
        "RevisionsApi.drive_revisions_get",
        return_type,
        post_body,
        auth_names,
        header_params,
        query_params,
        form_params
      )

      if @api_client.config.debugging
        Log.debug { "API called: RevisionsApi#drive_revisions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end
      return Revision.from_nason(data), status_code, headers
    end

    # Gets a revision&#39;s metadata or content by ID.
    # @param file_id [String] The ID of the file.
    # @param revision_id [String] The ID of the revision.
    # @return nil
    def drive_revisions_get(*, file_id : String, revision_id : String, alt : String? = "json", fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = true, quota_user : String? = nil, user_ip : String? = nil, acknowledge_abuse : Bool? = false, &block : Crest::Response ->)
      if @api_client.config.debugging
        Log.debug { "Calling API: RevisionsApi.drive_revisions_get ..." }
      end
      allowable_values = ["json", "media"]
      if @api_client.config.client_side_validation && alt.present? && !allowable_values.includes?(alt)
        raise ArgumentError.new("invalid value for \"alt\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/drive/v3/files/{fileId}/revisions/{revisionId}".sub("{" + "fileId" + "}", URI.encode_path(file_id.to_s)).sub("{" + "revisionId" + "}", URI.encode_path(revision_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["alt"] = alt.to_s if alt.present?
      query_params["fields"] = fields.to_s if fields.present?
      query_params["key"] = key.to_s if key.present?
      query_params["oauth_token"] = oauth_token.to_s if oauth_token.present?
      query_params["prettyPrint"] = pretty_print.to_s if pretty_print.present?
      query_params["quotaUser"] = quota_user.to_s if quota_user.present?
      query_params["userIp"] = user_ip.to_s if user_ip.present?
      query_params["acknowledgeAbuse"] = acknowledge_abuse.to_s if acknowledge_abuse.present?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Revision"

      # auth_names
      auth_names = ["Oauth2"]

      @api_client.call_api(
        :"GET",
        local_var_path,
        "RevisionsApi.drive_revisions_get",
        return_type,
        post_body,
        auth_names,
        header_params,
        query_params,
        form_params
      ) do |response|
        block.call(response)
      end
    end

    # Lists a file's revisions.
    # @param file_id [String] The ID of the file.
    # @return [RevisionList]
    def drive_revisions_list(*, file_id : String, alt : String? = "json", fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = true, quota_user : String? = nil, user_ip : String? = nil, page_size : Int32? = 200, page_token : String? = nil)
      data, _status_code, _headers = drive_revisions_list_with_http_info(file_id: file_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, page_size: page_size, page_token: page_token)
      data
    end

    # Lists a file&#39;s revisions.
    # @param file_id [String] The ID of the file.
    # @return [Array<(RevisionList, Integer, Hash)>] RevisionList data, response status code and response headers
    def drive_revisions_list_with_http_info(*, file_id : String, alt : String? = "json", fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = true, quota_user : String? = nil, user_ip : String? = nil, page_size : Int32? = 200, page_token : String? = nil)
      if @api_client.config.debugging
        Log.debug { "Calling API: RevisionsApi.drive_revisions_list ..." }
      end
      allowable_values = ["json", "media"]
      if @api_client.config.client_side_validation && alt.present? && !allowable_values.includes?(alt)
        raise ArgumentError.new("invalid value for \"alt\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !page_size.nil? && page_size > 1000
        raise ArgumentError.new("invalid value for \"page_size\" when calling RevisionsApi.drive_revisions_list, must be smaller than or equal to 1000.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size < 1
        raise ArgumentError.new("invalid value for \"page_size\" when calling RevisionsApi.drive_revisions_list, must be greater than or equal to 1.")
      end

      # resource path
      local_var_path = "/drive/v3/files/{fileId}/revisions".sub("{" + "fileId" + "}", URI.encode_path(file_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["alt"] = alt.to_s if alt.present?
      query_params["fields"] = fields.to_s if fields.present?
      query_params["key"] = key.to_s if key.present?
      query_params["oauth_token"] = oauth_token.to_s if oauth_token.present?
      query_params["prettyPrint"] = pretty_print.to_s if pretty_print.present?
      query_params["quotaUser"] = quota_user.to_s if quota_user.present?
      query_params["userIp"] = user_ip.to_s if user_ip.present?
      query_params["pageSize"] = page_size.to_s if page_size.present?
      query_params["pageToken"] = page_token.to_s if page_token.present?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "RevisionList"

      # auth_names
      auth_names = ["Oauth2"]

      data, status_code, headers = @api_client.call_api(
        :"GET",
        local_var_path,
        "RevisionsApi.drive_revisions_list",
        return_type,
        post_body,
        auth_names,
        header_params,
        query_params,
        form_params
      )

      if @api_client.config.debugging
        Log.debug { "API called: RevisionsApi#drive_revisions_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end
      return RevisionList.from_nason(data), status_code, headers
    end

    # Lists a file&#39;s revisions.
    # @param file_id [String] The ID of the file.
    # @return nil
    def drive_revisions_list(*, file_id : String, alt : String? = "json", fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = true, quota_user : String? = nil, user_ip : String? = nil, page_size : Int32? = 200, page_token : String? = nil, &block : Crest::Response ->)
      if @api_client.config.debugging
        Log.debug { "Calling API: RevisionsApi.drive_revisions_list ..." }
      end
      allowable_values = ["json", "media"]
      if @api_client.config.client_side_validation && alt.present? && !allowable_values.includes?(alt)
        raise ArgumentError.new("invalid value for \"alt\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !page_size.nil? && page_size > 1000
        raise ArgumentError.new("invalid value for \"page_size\" when calling RevisionsApi.drive_revisions_list, must be smaller than or equal to 1000.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size < 1
        raise ArgumentError.new("invalid value for \"page_size\" when calling RevisionsApi.drive_revisions_list, must be greater than or equal to 1.")
      end

      # resource path
      local_var_path = "/drive/v3/files/{fileId}/revisions".sub("{" + "fileId" + "}", URI.encode_path(file_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["alt"] = alt.to_s if alt.present?
      query_params["fields"] = fields.to_s if fields.present?
      query_params["key"] = key.to_s if key.present?
      query_params["oauth_token"] = oauth_token.to_s if oauth_token.present?
      query_params["prettyPrint"] = pretty_print.to_s if pretty_print.present?
      query_params["quotaUser"] = quota_user.to_s if quota_user.present?
      query_params["userIp"] = user_ip.to_s if user_ip.present?
      query_params["pageSize"] = page_size.to_s if page_size.present?
      query_params["pageToken"] = page_token.to_s if page_token.present?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "RevisionList"

      # auth_names
      auth_names = ["Oauth2"]

      @api_client.call_api(
        :"GET",
        local_var_path,
        "RevisionsApi.drive_revisions_list",
        return_type,
        post_body,
        auth_names,
        header_params,
        query_params,
        form_params
      ) do |response|
        block.call(response)
      end
    end

    # Updates a revision with patch semantics.
    # @param file_id [String] The ID of the file.
    # @param revision_id [String] The ID of the revision.
    # @return [Revision]
    def drive_revisions_update(*, file_id : String, revision_id : String, alt : String? = "json", fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = true, quota_user : String? = nil, user_ip : String? = nil, revision : Revision? = nil)
      data, _status_code, _headers = drive_revisions_update_with_http_info(file_id: file_id, revision_id: revision_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, revision: revision)
      data
    end

    # Updates a revision with patch semantics.
    # @param file_id [String] The ID of the file.
    # @param revision_id [String] The ID of the revision.
    # @return [Array<(Revision, Integer, Hash)>] Revision data, response status code and response headers
    def drive_revisions_update_with_http_info(*, file_id : String, revision_id : String, alt : String? = "json", fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = true, quota_user : String? = nil, user_ip : String? = nil, revision : Revision? = nil)
      if @api_client.config.debugging
        Log.debug { "Calling API: RevisionsApi.drive_revisions_update ..." }
      end
      allowable_values = ["json", "media"]
      if @api_client.config.client_side_validation && alt.present? && !allowable_values.includes?(alt)
        raise ArgumentError.new("invalid value for \"alt\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/drive/v3/files/{fileId}/revisions/{revisionId}".sub("{" + "fileId" + "}", URI.encode_path(file_id.to_s)).sub("{" + "revisionId" + "}", URI.encode_path(revision_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["alt"] = alt.to_s if alt.present?
      query_params["fields"] = fields.to_s if fields.present?
      query_params["key"] = key.to_s if key.present?
      query_params["oauth_token"] = oauth_token.to_s if oauth_token.present?
      query_params["prettyPrint"] = pretty_print.to_s if pretty_print.present?
      query_params["quotaUser"] = quota_user.to_s if quota_user.present?
      query_params["userIp"] = user_ip.to_s if user_ip.present?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | ::File)).new

      # http body (model)
      post_body = revision.to_nason

      # return_type
      return_type = "Revision"

      # auth_names
      auth_names = ["Oauth2"]

      data, status_code, headers = @api_client.call_api(
        :"PATCH",
        local_var_path,
        "RevisionsApi.drive_revisions_update",
        return_type,
        post_body,
        auth_names,
        header_params,
        query_params,
        form_params
      )

      if @api_client.config.debugging
        Log.debug { "API called: RevisionsApi#drive_revisions_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end
      return Revision.from_nason(data), status_code, headers
    end

    # Updates a revision with patch semantics.
    # @param file_id [String] The ID of the file.
    # @param revision_id [String] The ID of the revision.
    # @return nil
    def drive_revisions_update(*, file_id : String, revision_id : String, alt : String? = "json", fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = true, quota_user : String? = nil, user_ip : String? = nil, revision : Revision? = nil, &block : Crest::Response ->)
      if @api_client.config.debugging
        Log.debug { "Calling API: RevisionsApi.drive_revisions_update ..." }
      end
      allowable_values = ["json", "media"]
      if @api_client.config.client_side_validation && alt.present? && !allowable_values.includes?(alt)
        raise ArgumentError.new("invalid value for \"alt\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/drive/v3/files/{fileId}/revisions/{revisionId}".sub("{" + "fileId" + "}", URI.encode_path(file_id.to_s)).sub("{" + "revisionId" + "}", URI.encode_path(revision_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["alt"] = alt.to_s if alt.present?
      query_params["fields"] = fields.to_s if fields.present?
      query_params["key"] = key.to_s if key.present?
      query_params["oauth_token"] = oauth_token.to_s if oauth_token.present?
      query_params["prettyPrint"] = pretty_print.to_s if pretty_print.present?
      query_params["quotaUser"] = quota_user.to_s if quota_user.present?
      query_params["userIp"] = user_ip.to_s if user_ip.present?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | ::File)).new

      # http body (model)
      post_body = revision.to_nason

      # return_type
      return_type = "Revision"

      # auth_names
      auth_names = ["Oauth2"]

      @api_client.call_api(
        :"PATCH",
        local_var_path,
        "RevisionsApi.drive_revisions_update",
        return_type,
        post_body,
        auth_names,
        header_params,
        query_params,
        form_params
      ) do |response|
        block.call(response)
      end
    end
  end
end
