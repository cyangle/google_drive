#  Drive API
#
# Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
#
# The version of the OpenAPI document: v3
#
# Generated by: https://openapi-generator.tech
#

require "uri"

module GoogleDrive
  class ChangesApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Gets the starting pageToken for listing future changes.
    # @return [StartPageToken]
    def get_start_page_token(*, alt : String? = "json", fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = true, quota_user : String? = nil, user_ip : String? = nil, drive_id : String? = nil, supports_all_drives : Bool? = false, supports_team_drives : Bool? = false, team_drive_id : String? = nil)
      data, _status_code, _headers = get_start_page_token_with_http_info(alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, drive_id: drive_id, supports_all_drives: supports_all_drives, supports_team_drives: supports_team_drives, team_drive_id: team_drive_id)
      data
    end

    # Gets the starting pageToken for listing future changes.
    # @return [Array<(StartPageToken, Integer, Hash)>] StartPageToken data, response status code and response headers
    def get_start_page_token_with_http_info(*, alt : String? = "json", fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = true, quota_user : String? = nil, user_ip : String? = nil, drive_id : String? = nil, supports_all_drives : Bool? = false, supports_team_drives : Bool? = false, team_drive_id : String? = nil)
      request = build_api_request_for_get_start_page_token(alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, drive_id: drive_id, supports_all_drives: supports_all_drives, supports_team_drives: supports_team_drives, team_drive_id: team_drive_id)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: ChangesApi#get_start_page_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return StartPageToken.from_nason(data), status_code, headers
    end

    # Gets the starting pageToken for listing future changes.
    # @return nil
    def get_start_page_token(*, alt : String? = "json", fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = true, quota_user : String? = nil, user_ip : String? = nil, drive_id : String? = nil, supports_all_drives : Bool? = false, supports_team_drives : Bool? = false, team_drive_id : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_start_page_token(alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, drive_id: drive_id, supports_all_drives: supports_all_drives, supports_team_drives: supports_team_drives, team_drive_id: team_drive_id).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_start_page_token(*, alt : String? = "json", fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = true, quota_user : String? = nil, user_ip : String? = nil, drive_id : String? = nil, supports_all_drives : Bool? = false, supports_team_drives : Bool? = false, team_drive_id : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: ChangesApi.get_start_page_token ..." }
      end
      allowable_values = ["json", "media"]
      if @api_client.config.client_side_validation && !alt.nil? && !alt.null? && !allowable_values.includes?(alt)
        raise ArgumentError.new("invalid value for \"alt\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/drive/v3/changes/startPageToken"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["alt"] = alt.to_s if !alt.nil? && !alt.null?
      query_params["fields"] = fields.to_s if !fields.nil? && !fields.null?
      query_params["key"] = key.to_s if !key.nil? && !key.null?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil? && !oauth_token.null?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil? && !pretty_print.null?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil? && !quota_user.null?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil? && !user_ip.null?
      query_params["driveId"] = drive_id.to_s if !drive_id.nil? && !drive_id.null?
      query_params["supportsAllDrives"] = supports_all_drives.to_s if !supports_all_drives.nil? && !supports_all_drives.null?
      query_params["supportsTeamDrives"] = supports_team_drives.to_s if !supports_team_drives.nil? && !supports_team_drives.null?
      query_params["teamDriveId"] = team_drive_id.to_s if !team_drive_id.nil? && !team_drive_id.null?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["Oauth2"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ChangesApi.drive_changes_get_start_page_token",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Lists the changes for a user or shared drive.
    # @param page_token [String] The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response or to the response from the getStartPageToken method.
    # @return [ChangeList]
    def list(*, page_token : String, alt : String? = "json", fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = true, quota_user : String? = nil, user_ip : String? = nil, drive_id : String? = nil, include_corpus_removals : Bool? = false, include_items_from_all_drives : Bool? = false, include_permissions_for_view : String? = nil, include_removed : Bool? = true, include_team_drive_items : Bool? = false, page_size : Int32? = 100, restrict_to_my_drive : Bool? = false, spaces : String? = "drive", supports_all_drives : Bool? = false, supports_team_drives : Bool? = false, team_drive_id : String? = nil)
      data, _status_code, _headers = list_with_http_info(page_token: page_token, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, drive_id: drive_id, include_corpus_removals: include_corpus_removals, include_items_from_all_drives: include_items_from_all_drives, include_permissions_for_view: include_permissions_for_view, include_removed: include_removed, include_team_drive_items: include_team_drive_items, page_size: page_size, restrict_to_my_drive: restrict_to_my_drive, spaces: spaces, supports_all_drives: supports_all_drives, supports_team_drives: supports_team_drives, team_drive_id: team_drive_id)
      data
    end

    # Lists the changes for a user or shared drive.
    # @param page_token [String] The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response or to the response from the getStartPageToken method.
    # @return [Array<(ChangeList, Integer, Hash)>] ChangeList data, response status code and response headers
    def list_with_http_info(*, page_token : String, alt : String? = "json", fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = true, quota_user : String? = nil, user_ip : String? = nil, drive_id : String? = nil, include_corpus_removals : Bool? = false, include_items_from_all_drives : Bool? = false, include_permissions_for_view : String? = nil, include_removed : Bool? = true, include_team_drive_items : Bool? = false, page_size : Int32? = 100, restrict_to_my_drive : Bool? = false, spaces : String? = "drive", supports_all_drives : Bool? = false, supports_team_drives : Bool? = false, team_drive_id : String? = nil)
      request = build_api_request_for_list(page_token: page_token, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, drive_id: drive_id, include_corpus_removals: include_corpus_removals, include_items_from_all_drives: include_items_from_all_drives, include_permissions_for_view: include_permissions_for_view, include_removed: include_removed, include_team_drive_items: include_team_drive_items, page_size: page_size, restrict_to_my_drive: restrict_to_my_drive, spaces: spaces, supports_all_drives: supports_all_drives, supports_team_drives: supports_team_drives, team_drive_id: team_drive_id)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: ChangesApi#list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ChangeList.from_nason(data), status_code, headers
    end

    # Lists the changes for a user or shared drive.
    # @param page_token [String] The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response or to the response from the getStartPageToken method.
    # @return nil
    def list(*, page_token : String, alt : String? = "json", fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = true, quota_user : String? = nil, user_ip : String? = nil, drive_id : String? = nil, include_corpus_removals : Bool? = false, include_items_from_all_drives : Bool? = false, include_permissions_for_view : String? = nil, include_removed : Bool? = true, include_team_drive_items : Bool? = false, page_size : Int32? = 100, restrict_to_my_drive : Bool? = false, spaces : String? = "drive", supports_all_drives : Bool? = false, supports_team_drives : Bool? = false, team_drive_id : String? = nil, &block : Crest::Response ->)
      build_api_request_for_list(page_token: page_token, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, drive_id: drive_id, include_corpus_removals: include_corpus_removals, include_items_from_all_drives: include_items_from_all_drives, include_permissions_for_view: include_permissions_for_view, include_removed: include_removed, include_team_drive_items: include_team_drive_items, page_size: page_size, restrict_to_my_drive: restrict_to_my_drive, spaces: spaces, supports_all_drives: supports_all_drives, supports_team_drives: supports_team_drives, team_drive_id: team_drive_id).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_list(*, page_token : String, alt : String? = "json", fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = true, quota_user : String? = nil, user_ip : String? = nil, drive_id : String? = nil, include_corpus_removals : Bool? = false, include_items_from_all_drives : Bool? = false, include_permissions_for_view : String? = nil, include_removed : Bool? = true, include_team_drive_items : Bool? = false, page_size : Int32? = 100, restrict_to_my_drive : Bool? = false, spaces : String? = "drive", supports_all_drives : Bool? = false, supports_team_drives : Bool? = false, team_drive_id : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: ChangesApi.list ..." }
      end
      allowable_values = ["json", "media"]
      if @api_client.config.client_side_validation && !alt.nil? && !alt.null? && !allowable_values.includes?(alt)
        raise ArgumentError.new("invalid value for \"alt\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !page_size.nil? && page_size > 1000
        raise ArgumentError.new("invalid value for \"page_size\" when calling ChangesApi.list, must be smaller than or equal to 1000.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size < 1
        raise ArgumentError.new("invalid value for \"page_size\" when calling ChangesApi.list, must be greater than or equal to 1.")
      end

      # resource path
      local_var_path = "/drive/v3/changes"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["alt"] = alt.to_s if !alt.nil? && !alt.null?
      query_params["fields"] = fields.to_s if !fields.nil? && !fields.null?
      query_params["key"] = key.to_s if !key.nil? && !key.null?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil? && !oauth_token.null?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil? && !pretty_print.null?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil? && !quota_user.null?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil? && !user_ip.null?
      query_params["pageToken"] = page_token.to_s if !page_token.nil? && !page_token.null?
      query_params["driveId"] = drive_id.to_s if !drive_id.nil? && !drive_id.null?
      query_params["includeCorpusRemovals"] = include_corpus_removals.to_s if !include_corpus_removals.nil? && !include_corpus_removals.null?
      query_params["includeItemsFromAllDrives"] = include_items_from_all_drives.to_s if !include_items_from_all_drives.nil? && !include_items_from_all_drives.null?
      query_params["includePermissionsForView"] = include_permissions_for_view.to_s if !include_permissions_for_view.nil? && !include_permissions_for_view.null?
      query_params["includeRemoved"] = include_removed.to_s if !include_removed.nil? && !include_removed.null?
      query_params["includeTeamDriveItems"] = include_team_drive_items.to_s if !include_team_drive_items.nil? && !include_team_drive_items.null?
      query_params["pageSize"] = page_size.to_s if !page_size.nil? && !page_size.null?
      query_params["restrictToMyDrive"] = restrict_to_my_drive.to_s if !restrict_to_my_drive.nil? && !restrict_to_my_drive.null?
      query_params["spaces"] = spaces.to_s if !spaces.nil? && !spaces.null?
      query_params["supportsAllDrives"] = supports_all_drives.to_s if !supports_all_drives.nil? && !supports_all_drives.null?
      query_params["supportsTeamDrives"] = supports_team_drives.to_s if !supports_team_drives.nil? && !supports_team_drives.null?
      query_params["teamDriveId"] = team_drive_id.to_s if !team_drive_id.nil? && !team_drive_id.null?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["Oauth2"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ChangesApi.drive_changes_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Subscribes to changes for a user.
    # @param page_token [String] The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response or to the response from the getStartPageToken method.
    # @return [Channel]
    def watch(*, page_token : String, alt : String? = "json", fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = true, quota_user : String? = nil, user_ip : String? = nil, drive_id : String? = nil, include_corpus_removals : Bool? = false, include_items_from_all_drives : Bool? = false, include_permissions_for_view : String? = nil, include_removed : Bool? = true, include_team_drive_items : Bool? = false, page_size : Int32? = 100, restrict_to_my_drive : Bool? = false, spaces : String? = "drive", supports_all_drives : Bool? = false, supports_team_drives : Bool? = false, team_drive_id : String? = nil, channel : Channel? = nil)
      data, _status_code, _headers = watch_with_http_info(page_token: page_token, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, drive_id: drive_id, include_corpus_removals: include_corpus_removals, include_items_from_all_drives: include_items_from_all_drives, include_permissions_for_view: include_permissions_for_view, include_removed: include_removed, include_team_drive_items: include_team_drive_items, page_size: page_size, restrict_to_my_drive: restrict_to_my_drive, spaces: spaces, supports_all_drives: supports_all_drives, supports_team_drives: supports_team_drives, team_drive_id: team_drive_id, channel: channel)
      data
    end

    # Subscribes to changes for a user.
    # @param page_token [String] The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response or to the response from the getStartPageToken method.
    # @return [Array<(Channel, Integer, Hash)>] Channel data, response status code and response headers
    def watch_with_http_info(*, page_token : String, alt : String? = "json", fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = true, quota_user : String? = nil, user_ip : String? = nil, drive_id : String? = nil, include_corpus_removals : Bool? = false, include_items_from_all_drives : Bool? = false, include_permissions_for_view : String? = nil, include_removed : Bool? = true, include_team_drive_items : Bool? = false, page_size : Int32? = 100, restrict_to_my_drive : Bool? = false, spaces : String? = "drive", supports_all_drives : Bool? = false, supports_team_drives : Bool? = false, team_drive_id : String? = nil, channel : Channel? = nil)
      request = build_api_request_for_watch(page_token: page_token, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, drive_id: drive_id, include_corpus_removals: include_corpus_removals, include_items_from_all_drives: include_items_from_all_drives, include_permissions_for_view: include_permissions_for_view, include_removed: include_removed, include_team_drive_items: include_team_drive_items, page_size: page_size, restrict_to_my_drive: restrict_to_my_drive, spaces: spaces, supports_all_drives: supports_all_drives, supports_team_drives: supports_team_drives, team_drive_id: team_drive_id, channel: channel)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: ChangesApi#watch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Channel.from_nason(data), status_code, headers
    end

    # Subscribes to changes for a user.
    # @param page_token [String] The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response or to the response from the getStartPageToken method.
    # @return nil
    def watch(*, page_token : String, alt : String? = "json", fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = true, quota_user : String? = nil, user_ip : String? = nil, drive_id : String? = nil, include_corpus_removals : Bool? = false, include_items_from_all_drives : Bool? = false, include_permissions_for_view : String? = nil, include_removed : Bool? = true, include_team_drive_items : Bool? = false, page_size : Int32? = 100, restrict_to_my_drive : Bool? = false, spaces : String? = "drive", supports_all_drives : Bool? = false, supports_team_drives : Bool? = false, team_drive_id : String? = nil, channel : Channel? = nil, &block : Crest::Response ->)
      build_api_request_for_watch(page_token: page_token, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, drive_id: drive_id, include_corpus_removals: include_corpus_removals, include_items_from_all_drives: include_items_from_all_drives, include_permissions_for_view: include_permissions_for_view, include_removed: include_removed, include_team_drive_items: include_team_drive_items, page_size: page_size, restrict_to_my_drive: restrict_to_my_drive, spaces: spaces, supports_all_drives: supports_all_drives, supports_team_drives: supports_team_drives, team_drive_id: team_drive_id, channel: channel).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_watch(*, page_token : String, alt : String? = "json", fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = true, quota_user : String? = nil, user_ip : String? = nil, drive_id : String? = nil, include_corpus_removals : Bool? = false, include_items_from_all_drives : Bool? = false, include_permissions_for_view : String? = nil, include_removed : Bool? = true, include_team_drive_items : Bool? = false, page_size : Int32? = 100, restrict_to_my_drive : Bool? = false, spaces : String? = "drive", supports_all_drives : Bool? = false, supports_team_drives : Bool? = false, team_drive_id : String? = nil, channel : Channel? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: ChangesApi.watch ..." }
      end
      allowable_values = ["json", "media"]
      if @api_client.config.client_side_validation && !alt.nil? && !alt.null? && !allowable_values.includes?(alt)
        raise ArgumentError.new("invalid value for \"alt\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !page_size.nil? && page_size > 1000
        raise ArgumentError.new("invalid value for \"page_size\" when calling ChangesApi.watch, must be smaller than or equal to 1000.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size < 1
        raise ArgumentError.new("invalid value for \"page_size\" when calling ChangesApi.watch, must be greater than or equal to 1.")
      end

      # resource path
      local_var_path = "/drive/v3/changes/watch"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["alt"] = alt.to_s if !alt.nil? && !alt.null?
      query_params["fields"] = fields.to_s if !fields.nil? && !fields.null?
      query_params["key"] = key.to_s if !key.nil? && !key.null?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil? && !oauth_token.null?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil? && !pretty_print.null?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil? && !quota_user.null?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil? && !user_ip.null?
      query_params["pageToken"] = page_token.to_s if !page_token.nil? && !page_token.null?
      query_params["driveId"] = drive_id.to_s if !drive_id.nil? && !drive_id.null?
      query_params["includeCorpusRemovals"] = include_corpus_removals.to_s if !include_corpus_removals.nil? && !include_corpus_removals.null?
      query_params["includeItemsFromAllDrives"] = include_items_from_all_drives.to_s if !include_items_from_all_drives.nil? && !include_items_from_all_drives.null?
      query_params["includePermissionsForView"] = include_permissions_for_view.to_s if !include_permissions_for_view.nil? && !include_permissions_for_view.null?
      query_params["includeRemoved"] = include_removed.to_s if !include_removed.nil? && !include_removed.null?
      query_params["includeTeamDriveItems"] = include_team_drive_items.to_s if !include_team_drive_items.nil? && !include_team_drive_items.null?
      query_params["pageSize"] = page_size.to_s if !page_size.nil? && !page_size.null?
      query_params["restrictToMyDrive"] = restrict_to_my_drive.to_s if !restrict_to_my_drive.nil? && !restrict_to_my_drive.null?
      query_params["spaces"] = spaces.to_s if !spaces.nil? && !spaces.null?
      query_params["supportsAllDrives"] = supports_all_drives.to_s if !supports_all_drives.nil? && !supports_all_drives.null?
      query_params["supportsTeamDrives"] = supports_team_drives.to_s if !supports_team_drives.nil? && !supports_team_drives.null?
      query_params["teamDriveId"] = team_drive_id.to_s if !team_drive_id.nil? && !team_drive_id.null?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = channel.to_nason

      # auth_names
      auth_names = ["Oauth2"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "ChangesApi.drive_changes_watch",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
