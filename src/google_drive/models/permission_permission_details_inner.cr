#  Drive API
#
# Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
#
# The version of the OpenAPI document: v3
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module GoogleDrive
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PermissionPermissionDetailsInner
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    # Whether this permission is inherited. This field is always populated. This is an output-only field.
    @[JSON::Field(key: "inherited", type: Bool?, presence: true, ignore_serialize: inherited.nil? && !inherited_present?)]
    property inherited : Bool?

    @[JSON::Field(ignore: true)]
    property? inherited_present : Bool = false

    # The ID of the item from which this permission is inherited. This is an output-only field.
    @[JSON::Field(key: "inheritedFrom", type: String?, presence: true, ignore_serialize: inherited_from.nil? && !inherited_from_present?)]
    property inherited_from : String?

    @[JSON::Field(ignore: true)]
    property? inherited_from_present : Bool = false

    # The permission type for this user. While new values may be added in future, the following are currently possible:   - file  - member
    @[JSON::Field(key: "permissionType", type: String?, presence: true, ignore_serialize: permission_type.nil? && !permission_type_present?)]
    property permission_type : String?

    @[JSON::Field(ignore: true)]
    property? permission_type_present : Bool = false

    # The primary role for this user. While new values may be added in the future, the following are currently possible:   - organizer  - fileOrganizer  - writer  - commenter  - reader
    @[JSON::Field(key: "role", type: String?, presence: true, ignore_serialize: role.nil? && !role_present?)]
    property role : String?

    @[JSON::Field(ignore: true)]
    property? role_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @inherited : Bool? = nil, @inherited_from : String? = nil, @permission_type : String? = nil, @role : String? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@inherited, @inherited_from, @permission_type, @role)
  end
end
