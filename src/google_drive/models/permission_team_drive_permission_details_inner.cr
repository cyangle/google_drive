#  Drive API
#
# Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
#
# The version of the OpenAPI document: v3
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module GoogleDrive
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PermissionTeamDrivePermissionDetailsInner
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    # Deprecated - use permissionDetails/inherited instead.
    @[JSON::Field(key: "inherited", type: Bool?, presence: true, ignore_serialize: inherited.nil? && !inherited_present?)]
    property inherited : Bool?

    @[JSON::Field(ignore: true)]
    property? inherited_present : Bool = false

    # Deprecated - use permissionDetails/inheritedFrom instead.
    @[JSON::Field(key: "inheritedFrom", type: String?, presence: true, ignore_serialize: inherited_from.nil? && !inherited_from_present?)]
    property inherited_from : String?

    @[JSON::Field(ignore: true)]
    property? inherited_from_present : Bool = false

    # Deprecated - use permissionDetails/role instead.
    @[JSON::Field(key: "role", type: String?, presence: true, ignore_serialize: role.nil? && !role_present?)]
    property role : String?

    @[JSON::Field(ignore: true)]
    property? role_present : Bool = false

    # Deprecated - use permissionDetails/permissionType instead.
    @[JSON::Field(key: "teamDrivePermissionType", type: String?, presence: true, ignore_serialize: team_drive_permission_type.nil? && !team_drive_permission_type_present?)]
    property team_drive_permission_type : String?

    @[JSON::Field(ignore: true)]
    property? team_drive_permission_type_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @inherited : Bool? = nil, @inherited_from : String? = nil, @role : String? = nil, @team_drive_permission_type : String? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        inherited == o.inherited &&
        inherited_from == o.inherited_from &&
        role == o.role &&
        team_drive_permission_type == o.team_drive_permission_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@inherited, @inherited_from, @role, @team_drive_permission_type)
  end
end
