#  Drive API
#
# Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
#
# The version of the OpenAPI document: v3
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module GoogleDrive
  # A list of generated file IDs which can be provided in create requests.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class GeneratedIds
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    # The IDs generated for the requesting user in the specified space.
    @[JSON::Field(key: "ids", type: Array(String)?, presence: true, ignore_serialize: ids.nil? && !ids_present?)]
    property ids : Array(String)?

    @[JSON::Field(ignore: true)]
    property? ids_present : Bool = false

    # Identifies what kind of resource this is. Value: the fixed string \"drive#generatedIds\".
    @[JSON::Field(key: "kind", type: String?, default: "drive#generatedIds", presence: true, ignore_serialize: kind.nil? && !kind_present?)]
    property kind : String?

    @[JSON::Field(ignore: true)]
    property? kind_present : Bool = false

    # The type of file that can be created with these IDs.
    @[JSON::Field(key: "space", type: String?, presence: true, ignore_serialize: space.nil? && !space_present?)]
    property space : String?

    @[JSON::Field(ignore: true)]
    property? space_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @ids : Array(String)? = nil, @kind : String? = "drive#generatedIds", @space : String? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@ids, @kind, @space)
  end
end
