#  Drive API
#
# Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
#
# The version of the OpenAPI document: v3
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module GoogleDrive
  # An overview of the labels on the file.
  class FileLabelInfo
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The set of labels on the file as requested by the label IDs in the includeLabels parameter. By default, no labels are returned.
    @[JSON::Field(key: "labels", type: Array(GoogleDrive::Label)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter labels : Array(GoogleDrive::Label)? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @labels : Array(GoogleDrive::Label)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_labels = @labels).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "labels", container: _labels)) if _labels.is_a?(Array)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_labels = @labels).nil?
        return false if _labels.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _labels)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] labels Object to be assigned
    def labels=(new_value : Array(GoogleDrive::Label)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @labels = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@labels)
  end
end
