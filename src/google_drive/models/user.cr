#  Drive API
#
# Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
#
# The version of the OpenAPI document: v3
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module GoogleDrive
  # Information about a Drive user.
  class User
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # A plain text displayable name for this user.
    @[JSON::Field(key: "displayName", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter display_name : String? = nil

    # The email address of the user. This may not be present in certain contexts if the user has not made their email address visible to the requester.
    @[JSON::Field(key: "emailAddress", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter email_address : String? = nil

    # Identifies what kind of resource this is. Value: the fixed string \"drive#user\".
    @[JSON::Field(key: "kind", type: String?, default: "drive#user", required: false, nullable: false, emit_null: false)]
    getter kind : String? = "drive#user"

    # Whether this user is the requesting user.
    @[JSON::Field(key: "me", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter me : Bool? = nil

    # The user's ID as visible in Permission resources.
    @[JSON::Field(key: "permissionId", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter permission_id : String? = nil

    # A link to the user's profile photo, if available.
    @[JSON::Field(key: "photoLink", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter photo_link : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @display_name : String? = nil,
      @email_address : String? = nil,
      @kind : String? = "drive#user",
      @me : Bool? = nil,
      @permission_id : String? = nil,
      @photo_link : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] display_name Object to be assigned
    def display_name=(display_name : String?)
      if display_name.nil?
        return @display_name = nil
      end
      _display_name = display_name.not_nil!
      @display_name = _display_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] email_address Object to be assigned
    def email_address=(email_address : String?)
      if email_address.nil?
        return @email_address = nil
      end
      _email_address = email_address.not_nil!
      @email_address = _email_address
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] kind Object to be assigned
    def kind=(kind : String?)
      if kind.nil?
        return @kind = nil
      end
      _kind = kind.not_nil!
      @kind = _kind
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] me Object to be assigned
    def me=(me : Bool?)
      if me.nil?
        return @me = nil
      end
      _me = me.not_nil!
      @me = _me
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] permission_id Object to be assigned
    def permission_id=(permission_id : String?)
      if permission_id.nil?
        return @permission_id = nil
      end
      _permission_id = permission_id.not_nil!
      @permission_id = _permission_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] photo_link Object to be assigned
    def photo_link=(photo_link : String?)
      if photo_link.nil?
        return @photo_link = nil
      end
      _photo_link = photo_link.not_nil!
      @photo_link = _photo_link
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@display_name, @email_address, @kind, @me, @permission_id, @photo_link)
  end
end
