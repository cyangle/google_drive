#  Drive API
#
# Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
#
# The version of the OpenAPI document: v3
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module GoogleDrive
  # Information about a Drive user.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class User
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    # A plain text displayable name for this user.
    @[JSON::Field(key: "displayName", type: String?, presence: true, ignore_serialize: display_name.nil? && !display_name_present?)]
    property display_name : String?

    @[JSON::Field(ignore: true)]
    property? display_name_present : Bool = false

    # The email address of the user. This may not be present in certain contexts if the user has not made their email address visible to the requester.
    @[JSON::Field(key: "emailAddress", type: String?, presence: true, ignore_serialize: email_address.nil? && !email_address_present?)]
    property email_address : String?

    @[JSON::Field(ignore: true)]
    property? email_address_present : Bool = false

    # Identifies what kind of resource this is. Value: the fixed string \"drive#user\".
    @[JSON::Field(key: "kind", type: String?, default: "drive#user", presence: true, ignore_serialize: kind.nil? && !kind_present?)]
    property kind : String?

    @[JSON::Field(ignore: true)]
    property? kind_present : Bool = false

    # Whether this user is the requesting user.
    @[JSON::Field(key: "me", type: Bool?, presence: true, ignore_serialize: me.nil? && !me_present?)]
    property me : Bool?

    @[JSON::Field(ignore: true)]
    property? me_present : Bool = false

    # The user's ID as visible in Permission resources.
    @[JSON::Field(key: "permissionId", type: String?, presence: true, ignore_serialize: permission_id.nil? && !permission_id_present?)]
    property permission_id : String?

    @[JSON::Field(ignore: true)]
    property? permission_id_present : Bool = false

    # A link to the user's profile photo, if available.
    @[JSON::Field(key: "photoLink", type: String?, presence: true, ignore_serialize: photo_link.nil? && !photo_link_present?)]
    property photo_link : String?

    @[JSON::Field(ignore: true)]
    property? photo_link_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @display_name : String? = nil, @email_address : String? = nil, @kind : String? = "drive#user", @me : Bool? = nil, @permission_id : String? = nil, @photo_link : String? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        display_name == o.display_name &&
        email_address == o.email_address &&
        kind == o.kind &&
        me == o.me &&
        permission_id == o.permission_id &&
        photo_link == o.photo_link
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@display_name, @email_address, @kind, @me, @permission_id, @photo_link)
  end
end
