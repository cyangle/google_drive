#  Drive API
#
# Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
#
# The version of the OpenAPI document: v3
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module GoogleDrive
  # Deprecated: use the drive collection instead.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class TeamDrive
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    @[JSON::Field(key: "backgroundImageFile", type: TeamDriveBackgroundImageFile?, presence: true, ignore_serialize: background_image_file.nil? && !background_image_file_present?)]
    property background_image_file : TeamDriveBackgroundImageFile?

    @[JSON::Field(ignore: true)]
    property? background_image_file_present : Bool = false

    # A short-lived link to this Team Drive's background image.
    @[JSON::Field(key: "backgroundImageLink", type: String?, presence: true, ignore_serialize: background_image_link.nil? && !background_image_link_present?)]
    property background_image_link : String?

    @[JSON::Field(ignore: true)]
    property? background_image_link_present : Bool = false

    @[JSON::Field(key: "capabilities", type: TeamDriveCapabilities?, presence: true, ignore_serialize: capabilities.nil? && !capabilities_present?)]
    property capabilities : TeamDriveCapabilities?

    @[JSON::Field(ignore: true)]
    property? capabilities_present : Bool = false

    # The color of this Team Drive as an RGB hex string. It can only be set on a drive.teamdrives.update request that does not set themeId.
    @[JSON::Field(key: "colorRgb", type: String?, presence: true, ignore_serialize: color_rgb.nil? && !color_rgb_present?)]
    property color_rgb : String?

    @[JSON::Field(ignore: true)]
    property? color_rgb_present : Bool = false

    # The time at which the Team Drive was created (RFC 3339 date-time).
    @[JSON::Field(key: "createdTime", type: Time?, converter: Time::RFC3339Converter, presence: true, ignore_serialize: created_time.nil? && !created_time_present?)]
    property created_time : Time?

    @[JSON::Field(ignore: true)]
    property? created_time_present : Bool = false

    # The ID of this Team Drive which is also the ID of the top level folder of this Team Drive.
    @[JSON::Field(key: "id", type: String?, presence: true, ignore_serialize: id.nil? && !id_present?)]
    property id : String?

    @[JSON::Field(ignore: true)]
    property? id_present : Bool = false

    # Identifies what kind of resource this is. Value: the fixed string \"drive#teamDrive\".
    @[JSON::Field(key: "kind", type: String?, default: "drive#teamDrive", presence: true, ignore_serialize: kind.nil? && !kind_present?)]
    property kind : String?

    @[JSON::Field(ignore: true)]
    property? kind_present : Bool = false

    # The name of this Team Drive.
    @[JSON::Field(key: "name", type: String?, presence: true, ignore_serialize: name.nil? && !name_present?)]
    property name : String?

    @[JSON::Field(ignore: true)]
    property? name_present : Bool = false

    # The organizational unit of this shared drive. This field is only populated on drives.list responses when the useDomainAdminAccess parameter is set to true.
    @[JSON::Field(key: "orgUnitId", type: String?, presence: true, ignore_serialize: org_unit_id.nil? && !org_unit_id_present?)]
    property org_unit_id : String?

    @[JSON::Field(ignore: true)]
    property? org_unit_id_present : Bool = false

    @[JSON::Field(key: "restrictions", type: TeamDriveRestrictions?, presence: true, ignore_serialize: restrictions.nil? && !restrictions_present?)]
    property restrictions : TeamDriveRestrictions?

    @[JSON::Field(ignore: true)]
    property? restrictions_present : Bool = false

    # The ID of the theme from which the background image and color will be set. The set of possible teamDriveThemes can be retrieved from a drive.about.get response. When not specified on a drive.teamdrives.create request, a random theme is chosen from which the background image and color are set. This is a write-only field; it can only be set on requests that don't set colorRgb or backgroundImageFile.
    @[JSON::Field(key: "themeId", type: String?, presence: true, ignore_serialize: theme_id.nil? && !theme_id_present?)]
    property theme_id : String?

    @[JSON::Field(ignore: true)]
    property? theme_id_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @background_image_file : TeamDriveBackgroundImageFile? = nil, @background_image_link : String? = nil, @capabilities : TeamDriveCapabilities? = nil, @color_rgb : String? = nil, @created_time : Time? = nil, @id : String? = nil, @kind : String? = "drive#teamDrive", @name : String? = nil, @org_unit_id : String? = nil, @restrictions : TeamDriveRestrictions? = nil, @theme_id : String? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        background_image_file == o.background_image_file &&
        background_image_link == o.background_image_link &&
        capabilities == o.capabilities &&
        color_rgb == o.color_rgb &&
        created_time == o.created_time &&
        id == o.id &&
        kind == o.kind &&
        name == o.name &&
        org_unit_id == o.org_unit_id &&
        restrictions == o.restrictions &&
        theme_id == o.theme_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@background_image_file, @background_image_link, @capabilities, @color_rgb, @created_time, @id, @kind, @name, @org_unit_id, @restrictions, @theme_id)
  end
end
