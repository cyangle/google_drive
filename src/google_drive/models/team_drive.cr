#  Drive API
#
# Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
#
# The version of the OpenAPI document: v3
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module GoogleDrive
  # Deprecated: use the drive collection instead.
  class TeamDrive
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "backgroundImageFile", type: GoogleDrive::TeamDriveBackgroundImageFile?, default: nil, required: false, nullable: false, emit_null: false)]
    getter background_image_file : GoogleDrive::TeamDriveBackgroundImageFile? = nil

    # A short-lived link to this Team Drive's background image.
    @[JSON::Field(key: "backgroundImageLink", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter background_image_link : String? = nil

    @[JSON::Field(key: "capabilities", type: GoogleDrive::TeamDriveCapabilities?, default: nil, required: false, nullable: false, emit_null: false)]
    getter capabilities : GoogleDrive::TeamDriveCapabilities? = nil

    # The color of this Team Drive as an RGB hex string. It can only be set on a drive.teamdrives.update request that does not set themeId.
    @[JSON::Field(key: "colorRgb", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter color_rgb : String? = nil

    # The time at which the Team Drive was created (RFC 3339 date-time).
    @[JSON::Field(key: "createdTime", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter created_time : Time? = nil

    # The ID of this Team Drive which is also the ID of the top level folder of this Team Drive.
    @[JSON::Field(key: "id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter id : String? = nil

    # Identifies what kind of resource this is. Value: the fixed string \"drive#teamDrive\".
    @[JSON::Field(key: "kind", type: String?, default: "drive#teamDrive", required: false, nullable: false, emit_null: false)]
    getter kind : String? = "drive#teamDrive"

    # The name of this Team Drive.
    @[JSON::Field(key: "name", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter name : String? = nil

    # The organizational unit of this shared drive. This field is only populated on drives.list responses when the useDomainAdminAccess parameter is set to true.
    @[JSON::Field(key: "orgUnitId", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter org_unit_id : String? = nil

    @[JSON::Field(key: "restrictions", type: GoogleDrive::TeamDriveRestrictions?, default: nil, required: false, nullable: false, emit_null: false)]
    getter restrictions : GoogleDrive::TeamDriveRestrictions? = nil

    # The ID of the theme from which the background image and color will be set. The set of possible teamDriveThemes can be retrieved from a drive.about.get response. When not specified on a drive.teamdrives.create request, a random theme is chosen from which the background image and color are set. This is a write-only field; it can only be set on requests that don't set colorRgb or backgroundImageFile.
    @[JSON::Field(key: "themeId", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter theme_id : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @background_image_file : GoogleDrive::TeamDriveBackgroundImageFile? = nil,
      @background_image_link : String? = nil,
      @capabilities : GoogleDrive::TeamDriveCapabilities? = nil,
      @color_rgb : String? = nil,
      @created_time : Time? = nil,
      @id : String? = nil,
      @kind : String? = "drive#teamDrive",
      @name : String? = nil,
      @org_unit_id : String? = nil,
      @restrictions : GoogleDrive::TeamDriveRestrictions? = nil,
      @theme_id : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_background_image_file = @background_image_file).nil?
        invalid_properties.concat(_background_image_file.list_invalid_properties_for("background_image_file")) if _background_image_file.is_a?(OpenApi::Validatable)
      end

      unless (_capabilities = @capabilities).nil?
        invalid_properties.concat(_capabilities.list_invalid_properties_for("capabilities")) if _capabilities.is_a?(OpenApi::Validatable)
      end

      unless (_restrictions = @restrictions).nil?
        invalid_properties.concat(_restrictions.list_invalid_properties_for("restrictions")) if _restrictions.is_a?(OpenApi::Validatable)
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_background_image_file = @background_image_file).nil?
        return false if _background_image_file.is_a?(OpenApi::Validatable) && !_background_image_file.valid?
      end

      unless (_capabilities = @capabilities).nil?
        return false if _capabilities.is_a?(OpenApi::Validatable) && !_capabilities.valid?
      end

      unless (_restrictions = @restrictions).nil?
        return false if _restrictions.is_a?(OpenApi::Validatable) && !_restrictions.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] background_image_file Object to be assigned
    def background_image_file=(new_value : GoogleDrive::TeamDriveBackgroundImageFile?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @background_image_file = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] background_image_link Object to be assigned
    def background_image_link=(new_value : String?)
      @background_image_link = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] capabilities Object to be assigned
    def capabilities=(new_value : GoogleDrive::TeamDriveCapabilities?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @capabilities = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] color_rgb Object to be assigned
    def color_rgb=(new_value : String?)
      @color_rgb = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created_time Object to be assigned
    def created_time=(new_value : Time?)
      @created_time = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] kind Object to be assigned
    def kind=(new_value : String?)
      @kind = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(new_value : String?)
      @name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] org_unit_id Object to be assigned
    def org_unit_id=(new_value : String?)
      @org_unit_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] restrictions Object to be assigned
    def restrictions=(new_value : GoogleDrive::TeamDriveRestrictions?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @restrictions = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] theme_id Object to be assigned
    def theme_id=(new_value : String?)
      @theme_id = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@background_image_file, @background_image_link, @capabilities, @color_rgb, @created_time, @id, @kind, @name, @org_unit_id, @restrictions, @theme_id)
  end
end
