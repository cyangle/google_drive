#  Drive API
#
# Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
#
# The version of the OpenAPI document: v3
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module GoogleDrive
  # A thumbnail for the file. This will only be used if Google Drive cannot generate a standard thumbnail.
  class FileContentHintsThumbnail
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The thumbnail data encoded with URL-safe Base64 (RFC 4648 section 5).
    @[JSON::Field(key: "image", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter image : String? = nil

    # The MIME type of the thumbnail.
    @[JSON::Field(key: "mimeType", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter mime_type : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @image : String? = nil,
      @mime_type : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] image Object to be assigned
    def image=(image : String?)
      if image.nil?
        return @image = nil
      end
      _image = image.not_nil!
      @image = _image
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mime_type Object to be assigned
    def mime_type=(mime_type : String?)
      if mime_type.nil?
        return @mime_type = nil
      end
      _mime_type = mime_type.not_nil!
      @mime_type = _mime_type
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@image, @mime_type)
  end
end
