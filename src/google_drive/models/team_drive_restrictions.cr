#  Drive API
#
# Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
#
# The version of the OpenAPI document: v3
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module GoogleDrive
  # A set of restrictions that apply to this Team Drive or items inside this Team Drive.
  class TeamDriveRestrictions
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # Whether administrative privileges on this Team Drive are required to modify restrictions.
    @[JSON::Field(key: "adminManagedRestrictions", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter admin_managed_restrictions : Bool? = nil

    # Whether the options to copy, print, or download files inside this Team Drive, should be disabled for readers and commenters. When this restriction is set to true, it will override the similarly named field to true for any file inside this Team Drive.
    @[JSON::Field(key: "copyRequiresWriterPermission", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter copy_requires_writer_permission : Bool? = nil

    # Whether access to this Team Drive and items inside this Team Drive is restricted to users of the domain to which this Team Drive belongs. This restriction may be overridden by other sharing policies controlled outside of this Team Drive.
    @[JSON::Field(key: "domainUsersOnly", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter domain_users_only : Bool? = nil

    # Whether access to items inside this Team Drive is restricted to members of this Team Drive.
    @[JSON::Field(key: "teamMembersOnly", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter team_members_only : Bool? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @admin_managed_restrictions : Bool? = nil,
      @copy_requires_writer_permission : Bool? = nil,
      @domain_users_only : Bool? = nil,
      @team_members_only : Bool? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] admin_managed_restrictions Object to be assigned
    def admin_managed_restrictions=(admin_managed_restrictions : Bool?)
      if admin_managed_restrictions.nil?
        return @admin_managed_restrictions = nil
      end
      _admin_managed_restrictions = admin_managed_restrictions.not_nil!
      @admin_managed_restrictions = _admin_managed_restrictions
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] copy_requires_writer_permission Object to be assigned
    def copy_requires_writer_permission=(copy_requires_writer_permission : Bool?)
      if copy_requires_writer_permission.nil?
        return @copy_requires_writer_permission = nil
      end
      _copy_requires_writer_permission = copy_requires_writer_permission.not_nil!
      @copy_requires_writer_permission = _copy_requires_writer_permission
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] domain_users_only Object to be assigned
    def domain_users_only=(domain_users_only : Bool?)
      if domain_users_only.nil?
        return @domain_users_only = nil
      end
      _domain_users_only = domain_users_only.not_nil!
      @domain_users_only = _domain_users_only
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] team_members_only Object to be assigned
    def team_members_only=(team_members_only : Bool?)
      if team_members_only.nil?
        return @team_members_only = nil
      end
      _team_members_only = team_members_only.not_nil!
      @team_members_only = _team_members_only
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@admin_managed_restrictions, @copy_requires_writer_permission, @domain_users_only, @team_members_only)
  end
end
