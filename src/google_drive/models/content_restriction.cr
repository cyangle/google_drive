#  Drive API
#
# Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
#
# The version of the OpenAPI document: v3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./user"

module GoogleDrive
  # A restriction for accessing the content of the file.
  class ContentRestriction
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # Whether the content of the file is read-only. If a file is read-only, a new revision of the file may not be added, comments may not be added or modified, and the title of the file may not be modified.
    @[JSON::Field(key: "readOnly", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter read_only : Bool? = nil

    # Reason for why the content of the file is restricted. This is only mutable on requests that also set readOnly=true.
    @[JSON::Field(key: "reason", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter reason : String? = nil

    @[JSON::Field(key: "restrictingUser", type: GoogleDrive::User?, default: nil, required: false, nullable: false, emit_null: false)]
    getter restricting_user : GoogleDrive::User? = nil

    # The time at which the content restriction was set (formatted RFC 3339 timestamp). Only populated if readOnly is true.
    @[JSON::Field(key: "restrictionTime", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter restriction_time : Time? = nil

    # The type of the content restriction. Currently the only possible value is globalContentRestriction.
    @[JSON::Field(key: "type", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter _type : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @read_only : Bool? = nil,
      @reason : String? = nil,
      @restricting_user : GoogleDrive::User? = nil,
      @restriction_time : Time? = nil,
      @_type : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_restricting_user = @restricting_user).nil?
        invalid_properties.concat(_restricting_user.list_invalid_properties_for("restricting_user")) if _restricting_user.is_a?(OpenApi::Validatable)
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_restricting_user = @restricting_user).nil?
        return false if _restricting_user.is_a?(OpenApi::Validatable) && !_restricting_user.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] read_only Object to be assigned
    def read_only=(new_value : Bool?)
      @read_only = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reason Object to be assigned
    def reason=(new_value : String?)
      @reason = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] restricting_user Object to be assigned
    def restricting_user=(new_value : GoogleDrive::User?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @restricting_user = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] restriction_time Object to be assigned
    def restriction_time=(new_value : Time?)
      @restriction_time = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : String?)
      @_type = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@read_only, @reason, @restricting_user, @restriction_time, @_type)
  end
end
