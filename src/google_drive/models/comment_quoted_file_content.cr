#  Drive API
#
# Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
#
# The version of the OpenAPI document: v3
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module GoogleDrive
  # The file content to which the comment refers, typically within the anchor region. For a text file, for example, this would be the text at the location of the comment.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class CommentQuotedFileContent
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    # The MIME type of the quoted content.
    @[JSON::Field(key: "mimeType", type: String?, presence: true, ignore_serialize: mime_type.nil? && !mime_type_present?)]
    property mime_type : String?

    @[JSON::Field(ignore: true)]
    property? mime_type_present : Bool = false

    # The quoted content itself. This is interpreted as plain text if set through the API.
    @[JSON::Field(key: "value", type: String?, presence: true, ignore_serialize: value.nil? && !value_present?)]
    property value : String?

    @[JSON::Field(ignore: true)]
    property? value_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @mime_type : String? = nil, @value : String? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        mime_type == o.mime_type &&
        value == o.value
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [mime_type, value].hash
    end
  end
end
