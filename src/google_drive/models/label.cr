#  Drive API
#
# Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
#
# The version of the OpenAPI document: v3
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module GoogleDrive
  # Representation of a label and its fields.
  class Label
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # A map of the label's fields keyed by the field ID.
    @[JSON::Field(key: "fields", type: Hash(String, GoogleDrive::LabelField)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter fields : Hash(String, GoogleDrive::LabelField)? = nil

    # The ID of the label.
    @[JSON::Field(key: "id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter id : String? = nil

    # This is always drive#label
    @[JSON::Field(key: "kind", type: String?, default: "drive#label", required: false, nullable: false, emit_null: false)]
    getter kind : String? = "drive#label"

    # The revision ID of the label.
    @[JSON::Field(key: "revisionId", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter revision_id : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @fields : Hash(String, GoogleDrive::LabelField)? = nil,
      @id : String? = nil,
      @kind : String? = "drive#label",
      @revision_id : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_fields = @fields).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "fields", container: _fields)) if _fields.is_a?(Hash)
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_fields = @fields).nil?
        return false if _fields.is_a?(Hash) && !OpenApi::ContainerValidator.valid?(container: _fields)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fields Object to be assigned
    def fields=(fields : Hash(String, GoogleDrive::LabelField)?)
      if fields.nil?
        return @fields = nil
      end
      _fields = fields.not_nil!
      OpenApi::ContainerValidator.validate(container: _fields) if _fields.is_a?(Hash)
      @fields = _fields
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : String?)
      if id.nil?
        return @id = nil
      end
      _id = id.not_nil!
      @id = _id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] kind Object to be assigned
    def kind=(kind : String?)
      if kind.nil?
        return @kind = nil
      end
      _kind = kind.not_nil!
      @kind = _kind
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] revision_id Object to be assigned
    def revision_id=(revision_id : String?)
      if revision_id.nil?
        return @revision_id = nil
      end
      _revision_id = revision_id.not_nil!
      @revision_id = _revision_id
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@fields, @id, @kind, @revision_id)
  end
end
