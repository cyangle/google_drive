#  Drive API
#
# Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
#
# The version of the OpenAPI document: v3
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module GoogleDrive
  # Additional information about the content of the file. These fields are never populated in responses.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class FileContentHints
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties

    # Text to be indexed for the file to improve fullText queries. This is limited to 128KB in length and may contain HTML elements.
    @[JSON::Field(key: "indexableText", type: String?, presence: true, ignore_serialize: indexable_text.nil? && !indexable_text_present?)]
    property indexable_text : String?

    @[JSON::Field(ignore: true)]
    property? indexable_text_present : Bool = false

    @[JSON::Field(key: "thumbnail", type: FileContentHintsThumbnail?, presence: true, ignore_serialize: thumbnail.nil? && !thumbnail_present?)]
    property thumbnail : FileContentHintsThumbnail?

    @[JSON::Field(ignore: true)]
    property? thumbnail_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @indexable_text : String? = nil,
      @thumbnail : FileContentHintsThumbnail? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@indexable_text, @indexable_text_present, @thumbnail, @thumbnail_present)
  end
end
