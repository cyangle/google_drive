#  Drive API
#
# Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
#
# The version of the OpenAPI document: v3
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module GoogleDrive
  # Additional metadata about video media. This may not be available immediately upon upload.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class FileVideoMediaMetadata
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    # The duration of the video in milliseconds.
    @[JSON::Field(key: "durationMillis", type: String?, presence: true, ignore_serialize: duration_millis.nil? && !duration_millis_present?)]
    property duration_millis : String?

    @[JSON::Field(ignore: true)]
    property? duration_millis_present : Bool = false

    # The height of the video in pixels.
    @[JSON::Field(key: "height", type: Int32?, presence: true, ignore_serialize: height.nil? && !height_present?)]
    property height : Int32?

    @[JSON::Field(ignore: true)]
    property? height_present : Bool = false

    # The width of the video in pixels.
    @[JSON::Field(key: "width", type: Int32?, presence: true, ignore_serialize: width.nil? && !width_present?)]
    property width : Int32?

    @[JSON::Field(ignore: true)]
    property? width_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @duration_millis : String? = nil, @height : Int32? = nil, @width : Int32? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        duration_millis == o.duration_millis &&
        height == o.height &&
        width == o.width
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@duration_millis, @height, @width)
  end
end
