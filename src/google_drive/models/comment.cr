#  Drive API
#
# Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
#
# The version of the OpenAPI document: v3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./comment_quoted_file_content"
require "./reply"
require "./user"

module GoogleDrive
  # A comment on a file.
  class Comment
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # A region of the document represented as a JSON string. For details on defining anchor properties, refer to  Add comments and replies.
    @[JSON::Field(key: "anchor", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter anchor : String? = nil

    @[JSON::Field(key: "author", type: GoogleDrive::User?, default: nil, required: false, nullable: false, emit_null: false)]
    getter author : GoogleDrive::User? = nil

    # The plain text content of the comment. This field is used for setting the content, while htmlContent should be displayed.
    @[JSON::Field(key: "content", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter content : String? = nil

    # The time at which the comment was created (RFC 3339 date-time).
    @[JSON::Field(key: "createdTime", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter created_time : Time? = nil

    # Whether the comment has been deleted. A deleted comment has no content.
    @[JSON::Field(key: "deleted", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter deleted : Bool? = nil

    # The content of the comment with HTML formatting.
    @[JSON::Field(key: "htmlContent", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter html_content : String? = nil

    # The ID of the comment.
    @[JSON::Field(key: "id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter id : String? = nil

    # Identifies what kind of resource this is. Value: the fixed string \"drive#comment\".
    @[JSON::Field(key: "kind", type: String?, default: "drive#comment", required: false, nullable: false, emit_null: false)]
    getter kind : String? = "drive#comment"

    # The last time the comment or any of its replies was modified (RFC 3339 date-time).
    @[JSON::Field(key: "modifiedTime", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter modified_time : Time? = nil

    @[JSON::Field(key: "quotedFileContent", type: GoogleDrive::CommentQuotedFileContent?, default: nil, required: false, nullable: false, emit_null: false)]
    getter quoted_file_content : GoogleDrive::CommentQuotedFileContent? = nil

    # The full list of replies to the comment in chronological order.
    @[JSON::Field(key: "replies", type: Array(GoogleDrive::Reply)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter replies : Array(GoogleDrive::Reply)? = nil

    # Whether the comment has been resolved by one of its replies.
    @[JSON::Field(key: "resolved", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter resolved : Bool? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @anchor : String? = nil,
      @author : GoogleDrive::User? = nil,
      @content : String? = nil,
      @created_time : Time? = nil,
      @deleted : Bool? = nil,
      @html_content : String? = nil,
      @id : String? = nil,
      @kind : String? = "drive#comment",
      @modified_time : Time? = nil,
      @quoted_file_content : GoogleDrive::CommentQuotedFileContent? = nil,
      @replies : Array(GoogleDrive::Reply)? = nil,
      @resolved : Bool? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_author = @author).nil?
        invalid_properties.concat(_author.list_invalid_properties_for("author")) if _author.is_a?(OpenApi::Validatable)
      end

      unless (_quoted_file_content = @quoted_file_content).nil?
        invalid_properties.concat(_quoted_file_content.list_invalid_properties_for("quoted_file_content")) if _quoted_file_content.is_a?(OpenApi::Validatable)
      end
      unless (_replies = @replies).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "replies", container: _replies)) if _replies.is_a?(Array)
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_author = @author).nil?
        return false if _author.is_a?(OpenApi::Validatable) && !_author.valid?
      end

      unless (_quoted_file_content = @quoted_file_content).nil?
        return false if _quoted_file_content.is_a?(OpenApi::Validatable) && !_quoted_file_content.valid?
      end

      unless (_replies = @replies).nil?
        return false if _replies.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _replies)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] anchor Object to be assigned
    def anchor=(new_value : String?)
      @anchor = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] author Object to be assigned
    def author=(new_value : GoogleDrive::User?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @author = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] content Object to be assigned
    def content=(new_value : String?)
      @content = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created_time Object to be assigned
    def created_time=(new_value : Time?)
      @created_time = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] deleted Object to be assigned
    def deleted=(new_value : Bool?)
      @deleted = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] html_content Object to be assigned
    def html_content=(new_value : String?)
      @html_content = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] kind Object to be assigned
    def kind=(new_value : String?)
      @kind = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] modified_time Object to be assigned
    def modified_time=(new_value : Time?)
      @modified_time = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] quoted_file_content Object to be assigned
    def quoted_file_content=(new_value : GoogleDrive::CommentQuotedFileContent?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @quoted_file_content = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] replies Object to be assigned
    def replies=(new_value : Array(GoogleDrive::Reply)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @replies = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] resolved Object to be assigned
    def resolved=(new_value : Bool?)
      @resolved = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@anchor, @author, @content, @created_time, @deleted, @html_content, @id, @kind, @modified_time, @quoted_file_content, @replies, @resolved)
  end
end
