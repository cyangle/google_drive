#  Drive API
#
# Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
#
# The version of the OpenAPI document: v3
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module GoogleDrive
  # Geographic location information stored in the image.
  class FileImageMediaMetadataLocation
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The altitude stored in the image.
    @[JSON::Field(key: "altitude", type: Float64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter altitude : Float64? = nil

    # The latitude stored in the image.
    @[JSON::Field(key: "latitude", type: Float64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter latitude : Float64? = nil

    # The longitude stored in the image.
    @[JSON::Field(key: "longitude", type: Float64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter longitude : Float64? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @altitude : Float64? = nil,
      @latitude : Float64? = nil,
      @longitude : Float64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] altitude Object to be assigned
    def altitude=(new_value : Float64?)
      @altitude = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] latitude Object to be assigned
    def latitude=(new_value : Float64?)
      @latitude = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] longitude Object to be assigned
    def longitude=(new_value : Float64?)
      @longitude = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@altitude, @latitude, @longitude)
  end
end
