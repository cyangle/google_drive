#  Drive API
#
# Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
#
# The version of the OpenAPI document: v3
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module GoogleDrive
  # Geographic location information stored in the image.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class FileImageMediaMetadataLocation
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    # The altitude stored in the image.
    @[JSON::Field(key: "altitude", type: Float64?, presence: true, ignore_serialize: altitude.nil? && !altitude_present?)]
    property altitude : Float64?

    @[JSON::Field(ignore: true)]
    property? altitude_present : Bool = false

    # The latitude stored in the image.
    @[JSON::Field(key: "latitude", type: Float64?, presence: true, ignore_serialize: latitude.nil? && !latitude_present?)]
    property latitude : Float64?

    @[JSON::Field(ignore: true)]
    property? latitude_present : Bool = false

    # The longitude stored in the image.
    @[JSON::Field(key: "longitude", type: Float64?, presence: true, ignore_serialize: longitude.nil? && !longitude_present?)]
    property longitude : Float64?

    @[JSON::Field(ignore: true)]
    property? longitude_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @altitude : Float64? = nil, @latitude : Float64? = nil, @longitude : Float64? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        altitude == o.altitude &&
        latitude == o.latitude &&
        longitude == o.longitude
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@altitude, @latitude, @longitude)
  end
end
