#  Drive API
#
# Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
#
# The version of the OpenAPI document: v3
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module GoogleDrive
  # Shortcut file details. Only populated for shortcut files, which have the mimeType field set to application/vnd.google-apps.shortcut.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class FileShortcutDetails
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    # The ID of the file that this shortcut points to.
    @[JSON::Field(key: "targetId", type: String?, presence: true, ignore_serialize: target_id.nil? && !target_id_present?)]
    property target_id : String?

    @[JSON::Field(ignore: true)]
    property? target_id_present : Bool = false

    # The MIME type of the file that this shortcut points to. The value of this field is a snapshot of the target's MIME type, captured when the shortcut is created.
    @[JSON::Field(key: "targetMimeType", type: String?, presence: true, ignore_serialize: target_mime_type.nil? && !target_mime_type_present?)]
    property target_mime_type : String?

    @[JSON::Field(ignore: true)]
    property? target_mime_type_present : Bool = false

    # The ResourceKey for the target file.
    @[JSON::Field(key: "targetResourceKey", type: String?, presence: true, ignore_serialize: target_resource_key.nil? && !target_resource_key_present?)]
    property target_resource_key : String?

    @[JSON::Field(ignore: true)]
    property? target_resource_key_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @target_id : String? = nil, @target_mime_type : String? = nil, @target_resource_key : String? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        target_id == o.target_id &&
        target_mime_type == o.target_mime_type &&
        target_resource_key == o.target_resource_key
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@target_id, @target_mime_type, @target_resource_key)
  end
end
