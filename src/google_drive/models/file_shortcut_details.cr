#  Drive API
#
# Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
#
# The version of the OpenAPI document: v3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module GoogleDrive
  # Shortcut file details. Only populated for shortcut files, which have the mimeType field set to application/vnd.google-apps.shortcut.
  class FileShortcutDetails
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The ID of the file that this shortcut points to.
    @[JSON::Field(key: "targetId", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter target_id : String? = nil

    # The MIME type of the file that this shortcut points to. The value of this field is a snapshot of the target's MIME type, captured when the shortcut is created.
    @[JSON::Field(key: "targetMimeType", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter target_mime_type : String? = nil

    # The ResourceKey for the target file.
    @[JSON::Field(key: "targetResourceKey", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter target_resource_key : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @target_id : String? = nil,
      @target_mime_type : String? = nil,
      @target_resource_key : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] target_id Object to be assigned
    def target_id=(new_value : String?)
      @target_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] target_mime_type Object to be assigned
    def target_mime_type=(new_value : String?)
      @target_mime_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] target_resource_key Object to be assigned
    def target_resource_key=(new_value : String?)
      @target_resource_key = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@target_id, @target_mime_type, @target_resource_key)
  end
end
