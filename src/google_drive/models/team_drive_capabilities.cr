#  Drive API
#
# Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
#
# The version of the OpenAPI document: v3
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module GoogleDrive
  # Capabilities the current user has on this Team Drive.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class TeamDriveCapabilities
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    # Whether the current user can add children to folders in this Team Drive.
    @[JSON::Field(key: "canAddChildren", type: Bool?, presence: true, ignore_serialize: can_add_children.nil? && !can_add_children_present?)]
    property can_add_children : Bool?

    @[JSON::Field(ignore: true)]
    property? can_add_children_present : Bool = false

    # Whether the current user can change the copyRequiresWriterPermission restriction of this Team Drive.
    @[JSON::Field(key: "canChangeCopyRequiresWriterPermissionRestriction", type: Bool?, presence: true, ignore_serialize: can_change_copy_requires_writer_permission_restriction.nil? && !can_change_copy_requires_writer_permission_restriction_present?)]
    property can_change_copy_requires_writer_permission_restriction : Bool?

    @[JSON::Field(ignore: true)]
    property? can_change_copy_requires_writer_permission_restriction_present : Bool = false

    # Whether the current user can change the domainUsersOnly restriction of this Team Drive.
    @[JSON::Field(key: "canChangeDomainUsersOnlyRestriction", type: Bool?, presence: true, ignore_serialize: can_change_domain_users_only_restriction.nil? && !can_change_domain_users_only_restriction_present?)]
    property can_change_domain_users_only_restriction : Bool?

    @[JSON::Field(ignore: true)]
    property? can_change_domain_users_only_restriction_present : Bool = false

    # Whether the current user can change the background of this Team Drive.
    @[JSON::Field(key: "canChangeTeamDriveBackground", type: Bool?, presence: true, ignore_serialize: can_change_team_drive_background.nil? && !can_change_team_drive_background_present?)]
    property can_change_team_drive_background : Bool?

    @[JSON::Field(ignore: true)]
    property? can_change_team_drive_background_present : Bool = false

    # Whether the current user can change the teamMembersOnly restriction of this Team Drive.
    @[JSON::Field(key: "canChangeTeamMembersOnlyRestriction", type: Bool?, presence: true, ignore_serialize: can_change_team_members_only_restriction.nil? && !can_change_team_members_only_restriction_present?)]
    property can_change_team_members_only_restriction : Bool?

    @[JSON::Field(ignore: true)]
    property? can_change_team_members_only_restriction_present : Bool = false

    # Whether the current user can comment on files in this Team Drive.
    @[JSON::Field(key: "canComment", type: Bool?, presence: true, ignore_serialize: can_comment.nil? && !can_comment_present?)]
    property can_comment : Bool?

    @[JSON::Field(ignore: true)]
    property? can_comment_present : Bool = false

    # Whether the current user can copy files in this Team Drive.
    @[JSON::Field(key: "canCopy", type: Bool?, presence: true, ignore_serialize: can_copy.nil? && !can_copy_present?)]
    property can_copy : Bool?

    @[JSON::Field(ignore: true)]
    property? can_copy_present : Bool = false

    # Whether the current user can delete children from folders in this Team Drive.
    @[JSON::Field(key: "canDeleteChildren", type: Bool?, presence: true, ignore_serialize: can_delete_children.nil? && !can_delete_children_present?)]
    property can_delete_children : Bool?

    @[JSON::Field(ignore: true)]
    property? can_delete_children_present : Bool = false

    # Whether the current user can delete this Team Drive. Attempting to delete the Team Drive may still fail if there are untrashed items inside the Team Drive.
    @[JSON::Field(key: "canDeleteTeamDrive", type: Bool?, presence: true, ignore_serialize: can_delete_team_drive.nil? && !can_delete_team_drive_present?)]
    property can_delete_team_drive : Bool?

    @[JSON::Field(ignore: true)]
    property? can_delete_team_drive_present : Bool = false

    # Whether the current user can download files in this Team Drive.
    @[JSON::Field(key: "canDownload", type: Bool?, presence: true, ignore_serialize: can_download.nil? && !can_download_present?)]
    property can_download : Bool?

    @[JSON::Field(ignore: true)]
    property? can_download_present : Bool = false

    # Whether the current user can edit files in this Team Drive
    @[JSON::Field(key: "canEdit", type: Bool?, presence: true, ignore_serialize: can_edit.nil? && !can_edit_present?)]
    property can_edit : Bool?

    @[JSON::Field(ignore: true)]
    property? can_edit_present : Bool = false

    # Whether the current user can list the children of folders in this Team Drive.
    @[JSON::Field(key: "canListChildren", type: Bool?, presence: true, ignore_serialize: can_list_children.nil? && !can_list_children_present?)]
    property can_list_children : Bool?

    @[JSON::Field(ignore: true)]
    property? can_list_children_present : Bool = false

    # Whether the current user can add members to this Team Drive or remove them or change their role.
    @[JSON::Field(key: "canManageMembers", type: Bool?, presence: true, ignore_serialize: can_manage_members.nil? && !can_manage_members_present?)]
    property can_manage_members : Bool?

    @[JSON::Field(ignore: true)]
    property? can_manage_members_present : Bool = false

    # Whether the current user can read the revisions resource of files in this Team Drive.
    @[JSON::Field(key: "canReadRevisions", type: Bool?, presence: true, ignore_serialize: can_read_revisions.nil? && !can_read_revisions_present?)]
    property can_read_revisions : Bool?

    @[JSON::Field(ignore: true)]
    property? can_read_revisions_present : Bool = false

    # Deprecated - use canDeleteChildren or canTrashChildren instead.
    @[JSON::Field(key: "canRemoveChildren", type: Bool?, presence: true, ignore_serialize: can_remove_children.nil? && !can_remove_children_present?)]
    property can_remove_children : Bool?

    @[JSON::Field(ignore: true)]
    property? can_remove_children_present : Bool = false

    # Whether the current user can rename files or folders in this Team Drive.
    @[JSON::Field(key: "canRename", type: Bool?, presence: true, ignore_serialize: can_rename.nil? && !can_rename_present?)]
    property can_rename : Bool?

    @[JSON::Field(ignore: true)]
    property? can_rename_present : Bool = false

    # Whether the current user can rename this Team Drive.
    @[JSON::Field(key: "canRenameTeamDrive", type: Bool?, presence: true, ignore_serialize: can_rename_team_drive.nil? && !can_rename_team_drive_present?)]
    property can_rename_team_drive : Bool?

    @[JSON::Field(ignore: true)]
    property? can_rename_team_drive_present : Bool = false

    # Whether the current user can reset the Team Drive restrictions to defaults.
    @[JSON::Field(key: "canResetTeamDriveRestrictions", type: Bool?, presence: true, ignore_serialize: can_reset_team_drive_restrictions.nil? && !can_reset_team_drive_restrictions_present?)]
    property can_reset_team_drive_restrictions : Bool?

    @[JSON::Field(ignore: true)]
    property? can_reset_team_drive_restrictions_present : Bool = false

    # Whether the current user can share files or folders in this Team Drive.
    @[JSON::Field(key: "canShare", type: Bool?, presence: true, ignore_serialize: can_share.nil? && !can_share_present?)]
    property can_share : Bool?

    @[JSON::Field(ignore: true)]
    property? can_share_present : Bool = false

    # Whether the current user can trash children from folders in this Team Drive.
    @[JSON::Field(key: "canTrashChildren", type: Bool?, presence: true, ignore_serialize: can_trash_children.nil? && !can_trash_children_present?)]
    property can_trash_children : Bool?

    @[JSON::Field(ignore: true)]
    property? can_trash_children_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @can_add_children : Bool? = nil, @can_change_copy_requires_writer_permission_restriction : Bool? = nil, @can_change_domain_users_only_restriction : Bool? = nil, @can_change_team_drive_background : Bool? = nil, @can_change_team_members_only_restriction : Bool? = nil, @can_comment : Bool? = nil, @can_copy : Bool? = nil, @can_delete_children : Bool? = nil, @can_delete_team_drive : Bool? = nil, @can_download : Bool? = nil, @can_edit : Bool? = nil, @can_list_children : Bool? = nil, @can_manage_members : Bool? = nil, @can_read_revisions : Bool? = nil, @can_remove_children : Bool? = nil, @can_rename : Bool? = nil, @can_rename_team_drive : Bool? = nil, @can_reset_team_drive_restrictions : Bool? = nil, @can_share : Bool? = nil, @can_trash_children : Bool? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        can_add_children == o.can_add_children &&
        can_change_copy_requires_writer_permission_restriction == o.can_change_copy_requires_writer_permission_restriction &&
        can_change_domain_users_only_restriction == o.can_change_domain_users_only_restriction &&
        can_change_team_drive_background == o.can_change_team_drive_background &&
        can_change_team_members_only_restriction == o.can_change_team_members_only_restriction &&
        can_comment == o.can_comment &&
        can_copy == o.can_copy &&
        can_delete_children == o.can_delete_children &&
        can_delete_team_drive == o.can_delete_team_drive &&
        can_download == o.can_download &&
        can_edit == o.can_edit &&
        can_list_children == o.can_list_children &&
        can_manage_members == o.can_manage_members &&
        can_read_revisions == o.can_read_revisions &&
        can_remove_children == o.can_remove_children &&
        can_rename == o.can_rename &&
        can_rename_team_drive == o.can_rename_team_drive &&
        can_reset_team_drive_restrictions == o.can_reset_team_drive_restrictions &&
        can_share == o.can_share &&
        can_trash_children == o.can_trash_children
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [can_add_children, can_change_copy_requires_writer_permission_restriction, can_change_domain_users_only_restriction, can_change_team_drive_background, can_change_team_members_only_restriction, can_comment, can_copy, can_delete_children, can_delete_team_drive, can_download, can_edit, can_list_children, can_manage_members, can_read_revisions, can_remove_children, can_rename, can_rename_team_drive, can_reset_team_drive_restrictions, can_share, can_trash_children].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of String => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = GoogleDrive.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of String => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of String => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
