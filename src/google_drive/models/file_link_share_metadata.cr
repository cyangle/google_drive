#  Drive API
#
# Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
#
# The version of the OpenAPI document: v3
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module GoogleDrive
  # Contains details about the link URLs that clients are using to refer to this item.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class FileLinkShareMetadata
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    # Whether the file is eligible for security update.
    @[JSON::Field(key: "securityUpdateEligible", type: Bool?, presence: true, ignore_serialize: security_update_eligible.nil? && !security_update_eligible_present?)]
    property security_update_eligible : Bool?

    @[JSON::Field(ignore: true)]
    property? security_update_eligible_present : Bool = false

    # Whether the security update is enabled for this file.
    @[JSON::Field(key: "securityUpdateEnabled", type: Bool?, presence: true, ignore_serialize: security_update_enabled.nil? && !security_update_enabled_present?)]
    property security_update_enabled : Bool?

    @[JSON::Field(ignore: true)]
    property? security_update_enabled_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @security_update_eligible : Bool? = nil, @security_update_enabled : Bool? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        security_update_eligible == o.security_update_eligible &&
        security_update_enabled == o.security_update_enabled
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@security_update_eligible, @security_update_enabled)
  end
end
